<folder version="36" creator="Apsim 7.8-r3936" name="Simulations">
  <simulation name="Ryegrass">
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">01/07/2000</start_date>
      <end_date type="date" description="Enter the end date of the simulation">30/06/2002</end_date>
    </clock>
    <metfile name="met">
      <filename name="filename" input="yes">C:\apsim_dev\Data\MetFiles\VCS\VCS_Ruakura.met</filename>
    </metfile>
    <summaryfile />
    <area name="AgPastureLiFY" shortcut="/Simulations/Ryegrass/AgPastureClassic">
      <folder name="Managers" shortcut="/Simulations/Ryegrass/AgPastureClassic/Managers">
        <manager2 name="HarvestingAgPasture">
          <ui>
            <Dummy1 type="category" description="Setting up a harvesting rotation for AgPasture" />
            <CutPasture_StartDate type="ddmmmdate" description=" Enter the date to start the rotation (dd/mm/yyyy):">01/01/1900</CutPasture_StartDate>
            <CutPasture_EndDate type="ddmmmdate" description=" Enter the date to end the rotation (dd/mm/yyyy):">31/12/2100</CutPasture_EndDate>
            <Dummy2 type="category" description="Parameters defining the interval and amount to harvest" />
            <CutTriggerType type="list" listvalues="Fixed interval,Target interval,Target standing biomass" description=" Choose the trigger type, defines when harvests can occur:">Fixed interval</CutTriggerType>
            <Intervals2Cut type="text" description="   If trigger is interval between harvests, enter its value (days):">21</Intervals2Cut>
            <UpperThresholds type="text" description="   If trigger is the sward standing biomass, enter the amount (kgDM/ha):">2800</UpperThresholds>
            <RemoveAmountType type="list" listvalues="Set amount,Target amount,Given amounts down to residual DM,All herbage down to residual DM" description=" Choose how the amount to harvest will be defined:">All herbage down to residual DM</RemoveAmountType>
            <Amounts2Cut type="text" description="   If setting an amount, enter the value to harvest at each cut (kgDM/ha):">185</Amounts2Cut>
            <MinimumFraction type="text" description="      For target amount, enter the fraction of the target below which harvest is ignored (0-1):">0.33</MinimumFraction>
            <LowerThresholds type="text" description="   Enter the minimum residual standing biomass after cut (kgDM/ha):">1500</LowerThresholds>
            <Dummy3 type="category" description="Management of harvested material" />
            <ResidueTreatmentType type="list" listvalues="Return as residue,Return as dung &amp; urine" description=" Choose the treatment type for the harvested material:">Return as residue</ResidueTreatmentType>
            <DMRemovalOption type="list" listvalues="Based on herbage digestibility,type a fraction (0-1)" description=" Enter fraction of DM that is removed from the field (0-1):">1.0</DMRemovalOption>
            <FracN2Remove type="text" description=" Enter fraction of N that is removed from the field (0-1):">1.0</FracN2Remove>
            <Dummy4 type="category" description="   If returning residues as dung &amp; urine" />
            <UrineDepth type="text" description="    Enter the depth down to which urine will apllied (mm):">300</UrineDepth>
            <NinDungChoice type="list" listvalues="Set the proportion returned,Define the C:N ratio" description="    Choose how the N content in dung is defined:">Set the proportion returned</NinDungChoice>
            <FracN2Dung type="text" description="      If setting the proportion of N returned in dung, enter the value (0-1):">0.4</FracN2Dung>
            <CNratioDung type="text" description="      If defining the C:N ratio of dung, enter the value (approx. 10 to 20):">0.0</CNratioDung>
          </ui>
          <text>using System;
using ModelFramework;

//This manager sets up a cut/grazing rotation for AgPasture. It also handles the return of harvested material.
// The rotation is valid between two given dates only, these don't need to be bounded to the simulation dates (start date is set to simulation start date, if prior to it).
// Harvest is done on above ground standing DM, i.e. leaves plus stem/sheath (dead and green).
// Whether harvest can happen or not is evaluated in the first day (always), and thereof evaluations follow a trigger, varying for rotation types.
// + Cut trigger types:
//  - Fixed interval:
//     Cut is allowed at given days only (set by start rotation date and then at regular intervals);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is only allowed on the date selected, 'Can_Cut' is set to "no" at the end of the day;
//  - Target interval:
//     Cut is allowed from given days (begins at start rotation date and at regular intervals after last cut);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is allow from the date selected until something is harvested, only then 'Can_Cut' is set to "no";
//  - Target standing biomass:
//     Cut is allowed when existing DM reaches the target value;
//     Cut always happens, unless UpperThreshold is bellow the LowerThreshold (i.e. residual DM);
//     Cut is allowed until something is harvested (according to remove options), 'Can_Cut' is then set to "no";
//
// + Remove amount options:
//  - Set amount: The amount to remove is fixed, if this amount is not available, no cut is performed
//  - Target amount: The amount is the smallest of the given target value and difference between existing DM and the LowerThreshold (Residual DM);
//   » To avoid harvest of very small amounts a minimum fraction of the target value can be defined. If the existing amount is below that fraction the harvest is ignored.
//  - Given amounts down to residual DM: Amount to remove in a given day is given (which is limited to the difference to the minimum residual DM). However, harvest only stops
//    when standing DM reaches the LowerThreshold.  The minimum fraction to remove is also applied here to avoid very small amounts;
//  - All herbage down to residual DM: Amount to remove is the difference between existing DM and minimum residual DM (LowerThreshold);
//
// + Residue management options:
//  - Return as residue: A fraction of the DM harvested (plus the N on it) is added as grass residue to the surfaceOM module;
//  - Return as dung &amp; urine: A fraction of the amount harvested is returned to the soil as evenly distributed urine (urea) and dung;
//     This is a very simplified approach where the fractions of DM (i.e. carbon) and N to be removed are set separately. 
//     The fraction of dry matter (or carbon) to be removed can be set (0-1) or allowed to be calculated based on herbage digestibility.
//     The partition of N between urine and dung is set by the user by defining how N in dung is computed.
//     The DM and N to be returned as dung are added to surfaceOM 'RuminantDung_PastureFed'.
//     N urine is added as urea fertiliser, distributed from surface down to  a given depth. The proportion per layer decreases linearly with depth.
//  + Defining the N content in dung:
//    - Set proportion returned: A fraction of N not removed from the field is returned in the dung. The proportion returned as dung should be given.
//    - Define the C:N ratio: The C:N ratio for dung can be defined. Note that this option may alter the amount returned as urine (to ensure mass balance).

// » The values for few parameters can be entered as an array, these are interpreted as defining the rotation within a year, so the first value is assumed to be for 01/Jan,
//    the last value is for 31/Dec, and the values in between are spread evenly over the year. The value of the parameter for each day of the year is calculated 
//    dynamically by linear interpolation.  The parameters that can be set up as arrays are:
//    - Interval between harvests (Interval2Cut)
//    - The DM amount to trigger a harvest (UpperThreshold)
//    - The amount to remove on each harvest (Amount2Cut)
//    - The residual DM after harvest (LowerThreshold)

//--&gt;  Last uptaded in: 01/Oct/2015 ..................

public class Script
{
   //Parameter variables:
   [Param] private DateTime CutPasture_StartDate;  //Date to start the cutting rotation
   [Param] private DateTime CutPasture_EndDate;    //Date to end cutting rotation

   [Param] private string CutTriggerType;          //The cut trigger type (Fixed interval,Target interval,Target standing biomass)
   [Param] private double[] Intervals2Cut;         //The interval between cuts, used if cut trigger type is by interval (days), (values will be interpolated using DoY)
   [Param] private double[] UpperThresholds;       //The standing biomass amount to trigger a cut, if cut type is target biomass (kg/ha, standing DM [leaf+stem/sheath]), (values will be interpolated using DoY)

   [Param] private string RemoveAmountType;        //The way to compute how much pasture is cut (Set amount,Target amount,Given amounts down to residual DM, All herbage down to residual DM)
   [Param] private double[] Amounts2Cut;           //The amount of DM to be removed at each cut, limited to residual DM (LowerThreshold) (kg/ha, DM above ground), (values will be interpolated using DoY)
   [Param] private double MinimumFraction;         //The minimum fraction of harvest amount that is meaningful, below which harvest is ignored (for target amount)
   [Param] private double[] LowerThresholds;       //The minimum residual DM amount left after cut (kg/ha, DM above ground), (values will be interpolated using DoY)

   [Param] private string ResidueTreatmentType;    //The treatment to the material cut (Return as residue,Return as dung &amp; urine)
   [Param] private string DMRemovalOption;         //The option to define DM to remove (Based on herbage digestibility,type a fraction (0-1))
   [Param] private double FracN2Remove;            //Fraction of the N in the material cut that is removed from simulation (0-1)
   
   [Param] private double UrineDepth;              //The depth down to which urine will be applied (mm), proportion applied per layer decrease with depth
   [Param] private string NinDungChoice;           //The way N in dung is defined (Set proportion returned,Set CN ratio)
   [Param] private double FracN2Dung;              //The fraction of returned N that goes into dung, if return is as dung &amp; urine (0-1)
   [Param] private double CNratioDung;             //The C:N ratio of dung, if return is as dung and urine (~10-20)

   //Links and events:
   [Link] private Component MySelf;
   [Link] private AgPasture MyAgPasture;
   [Link] private Fertiliser MyFertiliser;
   [Link] private SurfaceOM MySurfaceOM;
   
   //Variables read from other modules
   [Input] private DateTime Today;     //Today's date
   [Input] private double[] dlayer;    //Today's day of year

   //Outputs
   [Output][Units("")] public string Can_Cut;                  //Whether today is a harvesting day
   [Output][Units("")] public string Has_Cut;                  //Whether today's harvest was done
   [Output][Units("kg/ha")] public double harvested_dm;        //Pasture DM harvested today (kg/ha)
   [Output][Units("kgN/ha")] public double harvested_n;        //N harvested today
   [Output][Units("kg/ha")] public double removed_dm;          //DM removed from the paddock
   [Output][Units("kgN/ha")] public double removed_n;          //N removed from the paddock
   [Output][Units("kgN/ha")] public double returned_dm;        //DM returned to the paddock
   [Output][Units("kgN/ha")] public double returned_n;         //N returned to the paddock
   [Output][Units("kgN/ha")] public double NReturnedInDung;    //N returned as dung (SurfaceOM)
   [Output][Units("kgN/ha")] public double NReturnedInUrine;   //N returned as urine (urea)
   [Output][Units("kg/ha/day")] public double GrowthRateCalc;  //Average growth rate for this cut
   [Output][Units("days")] public int DaysAfterCut;            //Number of days after last harvest
   [Output][Units("kg/ha")] public double PreHarvestDM;        //Total standing DM (Leaf + Stem/Sheath) before cut
   [Output][Units("kg/ha")] public double PostHarvestDM;       //Total standing DM (Leaf + Stem/Sheath) after cut
   [Output][Units("kg/ha")] public double ResidualDM;          //Today's residual DM
   [Output][Units("kg/ha")] public double TriggerDM;           //Today's trigger DM
   [Output][Units("kg/ha")] public double HarvestAmount;       //Today's DM amount to harvest
   [Output][Units("days")] public int CutInterval;             //Todays cut interval

   //Internal variables
   private double FracDM2Remove;       //The fraction of DM to be removed from the simulation (0-1)   
   private bool CutIsAllowed;          //Whether cutting are allowed
   private int[] LowerThresholdDays;   //The DoY for each value of lower threshold
   private int[] UpperThresholdDays;   //The DoY for each value of upper threshold
   private int[] Amount2HarvestDays;   //The DoY for each amount to cut given
   private int[] CutIntervalDays;      //The DoY for each given cut interval
   private double[] FracLayer;         //The fraction of urine to be applied in each layer

   [EventHandler()]
   public void OnInitialised()
   {      
      //Set the arrays with days
      LowerThresholdDays = setDays(LowerThresholds.Length);
      UpperThresholdDays = setDays(UpperThresholds.Length);
      Amount2HarvestDays = setDays(Amounts2Cut.Length);
      CutIntervalDays = setDays(Intervals2Cut.Length);
      
      //Reset variables
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      DaysAfterCut = CutInterval - 1;
      CutIsAllowed = false;
      Can_Cut = "no";
      Has_Cut = "no";

      //The fraction of DM to remove
      // - DMRemovalOption can be a value (0-1 = FracDM2Remove) or a string, which tell us that FracDM2Remove is based on digestibility
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      else
      {
         try
         {
            FracDM2Remove = Convert.ToDouble(DMRemovalOption);
            if ((FracDM2Remove &lt; 0.0) || (FracDM2Remove &gt; 1.0))
            {
               throw new Exception("Fraction of DM to remove is out of bounds");
            }
         } 
         catch 
         {
            throw new Exception("Fraction of DM to remove is not valid");
         }
      }
      
      //The fraction of N to remove
      if ((FracN2Remove &lt; 0.0) || (FracN2Remove &gt; 1.0))
      {
         throw new Exception("Fraction of N to remove is out of bounds");
      }
      
      //How to return residues (DM and N)
      if (ResidueTreatmentType.Contains("urine")) 
      {
         if (NinDungChoice.Contains("proportion")) 
         {
            if ((FracN2Dung &lt; 0.0) || (FracN2Dung &gt; 1.0))
            {
               throw new Exception("Proportion of N to return as dung is out of bounds");
            }
         } 
         else if (NinDungChoice.Contains("CN ratio")) 
         {
            if ((CNratioDung &lt; 0.0) || (CNratioDung &gt; 50.0))
            {
               throw new Exception("C:N ratio of dung is out of bounds");
            }
         } 
         else
         {
            throw new Exception("Choice for setting N content in dung is not valid");
         }
      }

      //compute the fraction of urine to be aplied per layer
      if (ResidueTreatmentType.Contains("urine"))
      {
         FracLayer = new double[dlayer.Length];
         double DepthFromSurface = 0.0;
         double dltZ = 0.0;
         for (int z = 0; z &lt; dlayer.Length;z++)
         {
            if(DepthFromSurface &lt; UrineDepth)
            {
               dltZ = Math.Min(dlayer[z], UrineDepth - DepthFromSurface);
               FracLayer[z] = 2 * dltZ * (1 - ((DepthFromSurface + 0.5 * dltZ) / UrineDepth)) / UrineDepth;
            }
            DepthFromSurface += dlayer[z];
         }
      }
      //Check whether choices are allowed and prepare messages     
      string myMessage1;
      string myMessage2 = "     remove ";
      switch (CutTriggerType.ToLower())
      {
         case "fixed interval":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            } 
            else
            {
               myMessage2 += RemoveAmountType.ToLower() + " (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut only every " + CutInterval.ToString() + " days";
            break;
         case "target interval":
            if (RemoveAmountType.ToLower().Contains("amount"))
            {               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else

               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut every " + CutInterval.ToString() + " days, or when possible";
            break;
         case "target standing biomass":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut when DM reaches " + TriggerDM + " kgDM/ha";
            break;
         default:
            throw new Exception("Cut trigger type is not valid");
      }

      //write messages on summary file
      Console.WriteLine("");
      Console.WriteLine("   Harvesting rotation for AgPasture initialised");
      Console.WriteLine("     rotation rule valid between " + CutPasture_StartDate.ToString("dd/MM/yyyy") + " and " + CutPasture_EndDate.ToString("dd/MM/yyyy"));
      Console.WriteLine("     rotation type: " + CutTriggerType.ToLower() + myMessage1);
      Console.WriteLine(myMessage2);
      if (DMRemovalOption.Contains("digestibility"))
      {
         myMessage1 = DMRemovalOption.ToLower();
      }
      else
      {
         myMessage1 = ((1.0 - FracDM2Remove) * 100).ToString("#0.0") + "%";
      }
      Console.WriteLine("     fraction of harvested DM to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      myMessage1 = ((1.0 - FracN2Remove) * 100).ToString("#0.0") + "%";
      if (FracN2Remove &lt; 0.999999)
      {
         myMessage1 += " (" + ((1.0 - FracN2Dung) * 100).ToString("#0.0") + "% of it as urine)";
      }
      Console.WriteLine("     fraction of harvested N to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      if (ResidueTreatmentType.Contains("urine"))
      {
         Console.WriteLine("     proportion of urine N to be added in each layer:");
         myMessage1 = FracLayer[0].ToString("0.000");
         for (int z = 1;z &lt; dlayer.Length;z++)
         {
            myMessage1 += ", " + FracLayer[z].ToString("0.000");
         }
         Console.WriteLine("      " + myMessage1);
      }
      Console.WriteLine("");
   }

   [EventHandler()]
   public void OnPrepare()
   {
      double Amount2Harvest;
      double AmountHarvestable;
      double ExistingDM;

      //Reset variables:
      Has_Cut = "no";
      harvested_dm = 0.0;
      harvested_n = 0.0;
      removed_dm = 0.0;
      removed_n = 0.0;
      returned_dm = 0.0;
      returned_n = 0.0;
      GrowthRateCalc = 0.0;
      NReturnedInDung = 0.0;
      NReturnedInUrine = 0.0;
      DaysAfterCut = DaysAfterCut + 1;
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      ExistingDM = MyAgPasture.StandingPlantWt;

      //Decide whether cut is allowed:
      if ((Today.Date &gt;= CutPasture_StartDate.Date) &amp;&amp; (Today.Date &lt;= CutPasture_EndDate.Date))
      {
         switch (CutTriggerType.ToLower())
         {
            case "fixed interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset in the end of the day
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               else
               {
                  CutIsAllowed = false;
                  //always reset CutIsAllowed
               }
               break;
            case "target interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset only if cut actually happens (depends on amount type)
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               break;
            case "target standing biomass":
               //Send an CutIsAllowed if existing DM amount is above the target (TriggerDM/UpperThreshold), it will be reset if cut actually happens
               if (ExistingDM &gt;= TriggerDM)
               {
                  CutIsAllowed = true;
               }
               break;
         }

         //The use of these avoid (or at least reduces) problems when two managers are used in the same simulation
         if (CutIsAllowed)
         {
            Can_Cut = "yes";
         }
         else
         {
            Can_Cut = "no";
         }
         
         //Decide how much to cut:
         if (CutIsAllowed)
         {
            PreHarvestDM = MyAgPasture.StandingPlantWt;

            switch (RemoveAmountType.ToLower())
            {
               case "set amount":
                  Amount2Harvest = HarvestAmount;
                  if (CutTriggerType.ToLower() == "fixed interval")
                  {
                     AmountHarvestable = PreHarvestDM;
                  }
                  else
                  {
                     AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  }
                  break;
               case "target amount":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "given amounts down to residual dm":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "all herbage down to residual dm":
                  Amount2Harvest = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               default:
                  throw new Exception("Option to compute DM amount to harvest is not valid");
            }

            //Decide whether cut actually happens:
            if ((AmountHarvestable &gt;= Amount2Harvest))
            {
               CutPasture(Amount2Harvest);
               HandleResidues();
               //reset cut variables
               DaysAfterCut = 0;
               Has_Cut = "yes";
               GrowthRateCalc = harvested_dm / DaysAfterCut;
               PostHarvestDM = MyAgPasture.StandingPlantWt;
               if (RemoveAmountType.Contains("amount"))
               { // check whether reamining amount is significant
                  if (Math.Abs(PostHarvestDM - ResidualDM) &lt; MinimumFraction * HarvestAmount)
                  {  
                     CutIsAllowed = false;
                  }
               }
               else
               {
                  CutIsAllowed = false;
               }
            }
         }
         else
         {
            Amount2Harvest = 0.0;
            AmountHarvestable = 0.0;
         }
      }
   }


   private void CutPasture(double Amount2Harvest)
   {
      // -- Cutting pasture ----------------------------------------------------------------------------

      GrazeType CutData = new GrazeType();
      CutData.sender = MySelf.Name;
      CutData.amount = (float) Amount2Harvest;
      CutData.type = "SetRemoveAmount";
      MyAgPasture.Graze(CutData);
      harvested_dm = MyAgPasture.HarvestWt;
      harvested_n = MyAgPasture.HarvestN;

      //Let user know (via summary) that a cut was made
      Console.WriteLine(Today.ToString("dd MMMM yyyy") + " (Day of year=" + Today.DayOfYear.ToString() + "), " + MySelf.Name + ":");
      Console.WriteLine("     Removing " + harvested_dm.ToString("#0") + "kg DM/ha, with " + harvested_n.ToString("#0.0") + "kg N/ha");
   }

   
   private void HandleResidues()
   {
      // -- Residue management -------------------------------------------------------------------------
      
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      removed_dm = harvested_dm * FracDM2Remove;
      removed_n = harvested_n * FracN2Remove;
      returned_dm = harvested_dm - removed_dm;
      returned_n = harvested_n - removed_n;

      if (returned_dm &lt; 0.0)
      {
         throw new Exception("Return_DM value is negative");
      }
      if (returned_n &lt; 0.0)
      {
         throw new Exception("Return_N value is negative");
      }

      if (ResidueTreatmentType.ToLower() == "return as residue")
      {
         if (FracDM2Remove &lt; 1.0)
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "grass";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) returned_n };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
      }
      else if (ResidueTreatmentType.ToLower() == "return as dung &amp; urine")
      {
         // It is advised that dung and urine return should be done using another manager or modules, such as 'UrinePatch' 

         if (NinDungChoice.Contains("proportion"))
         {
            NReturnedInDung = returned_n * FracN2Dung;
         }
         else if (NinDungChoice.Contains("CN ratio"))
         {
            NReturnedInDung = returned_dm / CNratioDung;
         }
         NReturnedInUrine = Math.Max(0.0, returned_n - NReturnedInDung);

         if (NReturnedInDung &gt; returned_n)
         {
            throw new Exception("Amount of N to return as dung is larger than total return, check proportion or CN ratio");
         }

         if ((returned_dm &gt; 0.0) || (NReturnedInDung &gt; 0.0))
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "RuminantDung_PastureFed";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) NReturnedInDung };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
         
         if (NReturnedInUrine &gt; 0.0)
         {
            FertiliserApplicationType UrineData = new FertiliserApplicationType();
            UrineData.Amount = (float) NReturnedInUrine;
            UrineData.Depth = 10;   // mm
            UrineData.Type = "urea_n";
            MyFertiliser.Apply(UrineData);
         }
      }
      else
      {
         throw new Exception("Residue management type is not valid");
      }
   }

   private int[] setDays(int NumDates)
   {
      //Define the day of year for each value on am array, given the arra's length - first value, day=1; last value day = 365; dates in between spread evenly (rounded)
      int[] xArray;
      if (NumDates &lt; 366)
      {
         xArray = new int[NumDates];
         xArray[0] = 1;
         if (NumDates &gt; 1)
         {
            xArray[NumDates - 1] = 365;
            if (NumDates &gt; 2)
            {
               for (int i = 1; i &lt; NumDates - 1; i++)
               {
                  xArray[i] = 365 * i / (NumDates);
               }
            }
         }
      }
      else
      {
         throw new Exception("Number of items on CoverTarget greater than maximum allowed (365)");
      }
      
      return xArray;
   }

   private double InterpolateVals(int my_x, int[] xArray, double[] yArray)
   {
      //Find out the value correspondig to my_x in the function described by the x and y arrays
      double my_y = 0.0;
      int iN = xArray.Length - 1;
      if (my_x &lt;= xArray[0])
      {
         //values below x[0] are set to y[0]
         my_y = yArray[0];
      }
      else if (my_x &gt;= xArray[iN])
      {
         //value above x(n) are set to y(n)
         my_y = yArray[iN];
      }
      else
      {
         //find the nearest neighbours and interpolate (linear)
         for (int i = 1; i &lt;= iN; i++)
         {
            if (my_x &lt;= xArray[i])
            {
               my_y = yArray[i - 1] + ((my_x - xArray[i - 1]) * (yArray[i] - yArray[i - 1]) / (xArray[i] - xArray[i - 1]));
               i = xArray.Length;
            }
         }
      }
      
      return my_y;
   }
}
</text>
        </manager2>
        <manager2 name="FertOnSoilNCriteria" shortcut="/Simulations/Ryegrass/AgPastureClassic/Managers/FertOnSoilNCriteria" />
        <manager2 name="CentrePivotIrrigation" shortcut="/Simulations/Ryegrass/AgPastureClassic/Managers/CentrePivotIrrigation" />
      </folder>
      <micromet name="Micromet" shortcut="/Simulations/Ryegrass/AgPastureClassic/Micromet" />
      <irrigation name="Irrigation" shortcut="/Simulations/Ryegrass/AgPastureClassic/Irrigation" />
      <fertiliser name="Fertiliser" shortcut="/Simulations/Ryegrass/AgPastureClassic/Fertiliser" />
      <surfaceom name="SurfaceOrganicMatter" shortcut="/Simulations/Ryegrass/AgPastureClassic/SurfaceOrganicMatter" />
      <Soil name="SoilLismore" shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore">
        <Analysis shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/Analysis" />
        <Water shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/Water" />
        <SoilWater shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/SoilWater" />
        <SoilOrganicMatter shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/SoilOrganicMatter" />
        <InitialWater name="Initial water" shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/Initial water" />
        <Sample name="Initial nitrogen" shortcut="/Simulations/Ryegrass/AgPastureClassic/SoilLismore/Initial nitrogen" />
      </Soil>
      <AgPastureLIFY>
        <Dummy1 type="category" description="Detailed parameters for each species (overwrites the xml file)" />
        <Nspecies type="text" description="Number of species">1</Nspecies>
        <thisCropName type="text" description="Crop name shown as on the simulation tree">AgPasture</thisCropName>
        <speciesName type="text" description="Species names">ryegrass</speciesName>
        <micrometType type="text" description="Crop type for MicroMet">grass</micrometType>
        <isAnnual type="text" description="Annual species? no=0, yes=1">0</isAnnual>
        <isLegume type="text" description="Legume species? no=0, yes=1">0</isLegume>
        <photoPath type="text" description="C3 or C4 species? C3=3, C4=4">3</photoPath>
        <rootDepth type="text" description="Root depth">750</rootDepth>
        <Pm type="text" description="Reference CO2 assimilation rate (mg CO2/m2.s)">1</Pm>
        <lightExtCoeff type="text" description="Light extinction coefficient">0.5</lightExtCoeff>
        <growthTmin type="text" description="Minimum temperature for growth">2</growthTmin>
        <growthTmax type="text" description="Maximum temperature for growth">30.28571429</growthTmax>
        <growthTopt type="text" description="Optimum temperature for growth">20</growthTopt>
        <growthTq type="text" description="Curvature of growth response to temperature">1.75</growthTq>
        <CO2PmaxScale type="text" description="CO2 - Scale factor for CO2 effect on photosynthesis">700</CO2PmaxScale>
        <CO2NScale type="text" description="CO2 - Scale factor for CO2 effects on plant N concentration">600</CO2NScale>
        <CO2NMin type="text" description="CO2 - Minimum fraction that plant N concentration may reduce to uder elevated CO2">0.7</CO2NMin>
        <CO2NCurvature type="text" description="CO2 - Curvature factor of CO2 effect on plant N concentration">2</CO2NCurvature>
        <heatOnsetT type="text" description="Heat effects- Onset temperature">28</heatOnsetT>
        <heatFullT type="text" description="Heat effects- Full temperature">35</heatFullT>
        <heatSumT type="text" description="Heat effects- Temperature sum for recovery">30</heatSumT>
        <coldOnsetT type="text" description="Cold effects- Onset temperature">0</coldOnsetT>
        <coldFullT type="text" description="Cold effects- Full temperature">-3</coldFullT>
        <coldSumT type="text" description="Cold effects- Temperature sum for recovery">20</coldSumT>
        <maintRespiration type="text" description="Maintenance respiration coefficient (%)">3</maintRespiration>
        <growthEfficiency type="text" description="Growth efficiency">0.75</growthEfficiency>
        <rateLive2Dead type="text" description="Live to dead turnover rate:">0.05</rateLive2Dead>
        <rateDead2Litter type="text" description="Dead to litter turnover rate:">0.11</rateDead2Litter>
        <rateRootSen type="text" description="Root senescence rate:">0.02</rateRootSen>
        <massFluxTmin type="text" description="Minimum temperature for mass flux">2</massFluxTmin>
        <massFluxTopt type="text" description="Optimum temperature for mass flux">20</massFluxTopt>
        <massFluxW0 type="text" description="Scale factor for response of mass flux to soil moisture">2</massFluxW0>
        <massFluxWopt type="text" description="Optimum soil moisture for mass flux">0.5</massFluxWopt>
        <stockParameter type="text" description="Stock influence parameter">0.05</stockParameter>
        <maxRootFraction type="text" description="Maximum biomass fraction allocated to root">0.25</maxRootFraction>
        <allocationSeasonF type="text" description="Factor for seasonal variation in DM allocation:">0.8</allocationSeasonF>
        <leafRate type="text" description="Reference leaf appearance rate without stress">3</leafRate>
        <fLeaf type="text" description="Reference growth partition to leaves">0.7</fLeaf>
        <fStolon type="text" description="Reference growth partition to stolon">0</fStolon>
        <SLA type="text" description="Specific leaf area">20</SLA>
        <digestLive type="text" description="Digestibility of live plant material">0.6</digestLive>
        <digestDead type="text" description="Digestibility of dead plant material">0.2</digestDead>
        <dmtotal type="text" description="Initial shoot dry matter (kg/ha)">2000</dmtotal>
        <dmlitter type="text" description="Initial litter dry matter (kg/ha)">250</dmlitter>
        <dmgreenmin type="text" description="Minimum green dry matter (kg/ha)">300</dmgreenmin>
        <NcleafOpt type="text" description="N concentration - leaf optimum">4</NcleafOpt>
        <NcleafMax type="text" description="N concentration - leaf luxury">5</NcleafMax>
        <NcleafMin type="text" description="N concentration - leaf scenescent">1.2</NcleafMin>
        <NcstemFr type="text" description="Stem N concentration as fraction of leaf N concentration">0.5</NcstemFr>
        <NcstolFr type="text" description="Stolon N concentration as fraction of leaf N concentration">0</NcstolFr>
        <NcrootFr type="text" description="Root N concentration as fraction of leaf N concentration">0.5</NcrootFr>
        <NMinFix type="text" description="Minimum N fixation (when soil N is sufficient)">0</NMinFix>
        <NMaxFix type="text" description="Maximum N fixation (when soil N is unavailable)">0</NMaxFix>
        <NdilutCoeff type="text" description="N dillution coefficient:">0.5</NdilutCoeff>
        <Frgr type="text" description="Relative growth factor">1</Frgr>
        <waterStressFactor type="text" description="Coefficient for modifying the effect of water stress on plant growth:">1</waterStressFactor>
        <soilSatFactor type="text" description="Coefficient for growth limitations due to soil moisture saturation:">0.1</soilSatFactor>
        <WaterUptakeSource type="list" listvalues="calc,apsim" description="Water uptake done by AgPasture (calc) or by apsim?">calc</WaterUptakeSource>
        <rlvp type="text" description="Root distribution of swards (relative to each soil layer)">0.014382    0.007488    0.002189    0.000264    0.000003    0.0    0.0</rlvp>
      </AgPastureLIFY>
      <outputfile name="Results_Species">
        <filename output="yes">Ryegrass AgPastureLiFY Results_Species.out</filename>
        <title>Ryegrass AgPastureLiFY Results_Species</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>SwardName as Sward.Name</variable>
          <variable>SpeciesName(1) as Ryegrass.Name</variable>
          <variable>Crop_type as Ryegrass.CropType</variable>
          <variable>SpeciesTotalWt(1) as Ryegrass.TotalWt</variable>
          <variable>SpeciesAboveGroundWt(1) as Ryegrass.AboveGroundWt</variable>
          <variable>SpeciesBelowGroundWt(1) as Ryegrass.BelowGroundWt</variable>
          <variable>StandingPlantWt as Ryegrass.StandingWt</variable>
          <variable>StandingLiveWt() as Ryegrass.StandingLiveWt</variable>
          <variable>StandingDeadWt() as Ryegrass.StandingDeadWt</variable>
          <variable>LeafWt as Ryegrass.LeafWt</variable>
          <variable>StemWt as Ryegrass.StemWt</variable>
          <variable>StolonWt as Ryegrass.StolonWt</variable>
          <variable>RootWt as Ryegrass.RootWt</variable>
          <variable>SpeciesLeafStage1Wt() as Ryegrass.LeafStage1Wt</variable>
          <variable>SpeciesLeafStage2Wt() as Ryegrass.LeafStage2Wt</variable>
          <variable>SpeciesLeafStage3Wt() as Ryegrass.LeafStage3Wt</variable>
          <variable>SpeciesLeafStage4Wt() as Ryegrass.LeafStage4Wt</variable>
          <variable>SpeciesStemStage1Wt() as Ryegrass.StemStage1Wt</variable>
          <variable>SpeciesStemStage2Wt() as Ryegrass.StemStage2Wt</variable>
          <variable>SpeciesStemStage3Wt() as Ryegrass.StemStage3Wt</variable>
          <variable>SpeciesStemStage4Wt() as Ryegrass.StemStage4Wt</variable>
          <variable>SpeciesStolonStage1Wt() as Ryegrass.StolonStage1Wt</variable>
          <variable>SpeciesStolonStage2Wt() as Ryegrass.StolonStage2Wt</variable>
          <variable>SpeciesStolonStage3Wt() as Ryegrass.StolonStage3Wt</variable>
          <variable>SpeciesPotCarbonAssimilation() as Ryegrass.PotCarbonAssimilation</variable>
          <variable>SpeciesCarbonLossRespiration() as Ryegrass.CarbonLossRespiration</variable>
          <variable>SpeciesPotGrowthGross(1) as Ryegrass.GrossPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthNet(1) as Ryegrass.NetPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthW(1) as Ryegrass.PotGrowthWt_Wstress</variable>
          <variable>SpeciesGrowthWt(1) as Ryegrass.ActualGrowthWt</variable>
          <variable>SpeciesEffGrowthWt(1) as Ryegrass.EffectiveGrowthWt</variable>
          <variable>SpeciesHerbageGrowthWt(1) as Ryegrass.HerbageGrowthWt</variable>
          <variable>speciesFShoot(1) as Ryegrass.ShootDMAllocation</variable>
          <variable>LitterDepositionWt as Ryegrass.LitterWt</variable>
          <variable>RootSenescenceWt as Ryegrass.RootSenescedWt</variable>
          <variable>SpeciesTotalN(1) as Ryegrass.TotalN</variable>
          <variable>StandingPlantN as Ryegrass.StandingN</variable>
          <variable>LeafN as Ryegrass.LeafN</variable>
          <variable>StemN as Ryegrass.StemN</variable>
          <variable>StolonN as Ryegrass.StolonN</variable>
          <variable>RootN as Ryegrass.RootN</variable>
          <variable>SpeciesLeafStage1N() as Ryegrass.LeafStage1N</variable>
          <variable>SpeciesLeafStage2N() as Ryegrass.LeafStage2N</variable>
          <variable>SpeciesLeafStage3N() as Ryegrass.LeafStage3N</variable>
          <variable>SpeciesLeafStage4N() as Ryegrass.LeafStage4N</variable>
          <variable>SpeciesStemStage1N() as Ryegrass.StemStage1N</variable>
          <variable>SpeciesStemStage2N() as Ryegrass.StemStage2N</variable>
          <variable>SpeciesStemStage3N() as Ryegrass.StemStage3N</variable>
          <variable>SpeciesStemStage4N() as Ryegrass.StemStage4N</variable>
          <variable>SpeciesStolonStage1N() as Ryegrass.StolonStage1N</variable>
          <variable>SpeciesStolonStage2N() as Ryegrass.StolonStage2N</variable>
          <variable>SpeciesStolonStage3N() as Ryegrass.StolonStage3N</variable>
          <variable>SpeciesLeafNConc(1) as Ryegrass.LeafNConc</variable>
          <variable>SpeciesStemNConc() as Ryegrass.StemNConc</variable>
          <variable>SpeciesStolonNConc() as Ryegrass.StolonNConc</variable>
          <variable>SpeciesRootNConc() as Ryegrass.RootNConc</variable>
          <variable>SpeciesSenescedNRemobilisable() as Ryegrass.RemobilisableSenescedN</variable>
          <variable>PlantRemobilisedN as Ryegrass.RemobilisedSenescedN</variable>
          <variable>SpeciesRemobilisableNLuxury() as Ryegrass.RemobilisableLuxuryN</variable>
          <variable>SpeciesLuxuryNRemobilised() as Ryegrass.RemobilisedLuxuryN</variable>
          <variable>PlantFixedN as Ryegrass.FixedN</variable>
          <variable>SpeciesRequiredNLuxury() as Ryegrass.RequiredLuxuryN</variable>
          <variable>SpeciesRequiredNOptimum() as Ryegrass.RequiredOptimumN</variable>
          <variable>p_soilNdemand as Ryegrass.DemandSoilN</variable>
          <variable>NitrogenSupply as Ryegrass.AvailableSoilN</variable>
          <variable>NitrogenUptake as Ryegrass.UptakeN</variable>
          <variable>LitterDepositionN as Ryegrass.LitterN</variable>
          <variable>RootSenescenceN as Ryegrass.SenescedRootN</variable>
          <variable>SpeciesGrowthN() as Ryegrass.ActualGrowthN</variable>
          <variable>SpeciesGrowthNconc() as Ryegrass.ActualGrowthNConc</variable>
          <variable>WaterDemand as Ryegrass.WaterDemand</variable>
          <variable>WaterSupply as Ryegrass.WaterAvailable</variable>
          <variable>WaterUptake as Ryegrass.WaterUptake</variable>
          <variable>SpeciesLiveDMTurnoverRate() as Ryegrass.LiveDMTurnoverRate</variable>
          <variable>SpeciesDeadDMTurnoverRate() as Ryegrass.DeadDMTurnoverRate</variable>
          <variable>SpeciesStolonDMTurnoverRate() as Ryegrass.StolonDMTurnoverRate</variable>
          <variable>SpeciesRootDMTurnoverRate() as Ryegrass.RootDMTurnoverRate</variable>
          <variable>LAI_total as Ryegrass.TotalLAI</variable>
          <variable>LAI_green as Ryegrass.GreenLAI</variable>
          <variable>LAI_dead as Ryegrass.DeadLAI</variable>
          <variable>Height as Ryegrass.Height</variable>
          <variable>rootDepth as Ryegrass.RootDepth</variable>
          <variable>SpeciesRadnFactor() as Ryegrass.GlfRadnIntercept</variable>
          <variable>SpeciesCO2Factor() as Ryegrass.GlfCO2</variable>
          <variable>GLFnConcentration as Ryegrass.GlfNConcentration</variable>
          <variable>GLFtemp as Ryegrass.GlfTemperature</variable>
          <variable>GLFTstress as Ryegrass.GlfHeat</variable>
          <variable>GLFTstress as Ryegrass.GlfCold</variable>
          <variable>SpeciesGLFA() as Ryegrass.GlfWaterLogging</variable>
          <variable>GLFwater as Ryegrass.GlfWater</variable>
          <variable>GLFn as Ryegrass.GlfN</variable>
          <variable>spIL1(1) as Ryegrass.IrradianceTopCanopy</variable>
          <variable>SpeciesHarvestableWt() as Ryegrass.HarvestableWt</variable>
          <variable>HarvestedWt as Ryegrass.HarvestedWt</variable>
          <variable>SpeciesHarvestPct(1) as Ryegrass.HarvestedFraction</variable>
          <variable>HarvestedN as Ryegrass.HarvestedN</variable>
          <variable>HerbageDigestibility as Ryegrass.HerbageDigestibility</variable>
          <variable>DefoliatedDigestibility as Ryegrass.HarvestedDigestibility</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
            <CheckedTitles> Ryegrass.HerbageDigestibility</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedDigestibility</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>Ryegrass.HerbageDigestibility</Y>
            <Y>Ryegrass.HarvestedDigestibility</Y>
            <Y>SpeciesHerbageDigestibility1</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <outputfile name="Results_Layers">
        <filename output="yes">Ryegrass AgPastureLiFY Results_Layers.out</filename>
        <title>Ryegrass AgPastureLiFY Results_Layers</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>dlayer as Soil.Thickness</variable>
          <variable>RLVP as Ryegrass.RootWtFraction</variable>
          <variable>rlv as Ryegrass.RLD</variable>
          <variable>NitrogenSupplyLayers as Ryegrass.NitrogenAvailable</variable>
          <variable>NitrogenUptakeLayers as Ryegrass.NitrogenUptake</variable>
          <variable>WaterSupplyLayers as Ryegrass.SoilAvailableWater</variable>
          <variable>WaterUptakeLayers as Ryegrass.WaterUptake</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
      </outputfile>
      <outputfile name="Results_MassBalance">
        <filename output="yes">Ryegrass AgPastureLiFY Results_MassBalance.out</filename>
        <title>Ryegrass AgPastureLiFY Results_MassBalance</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>TotalPlantN as TotalPlantN</variable>
          <variable>urea() as TotalUrea</variable>
          <variable>nh4() as TotalNH4</variable>
          <variable>no3() as TotalNO3</variable>
          <variable>hum_n() as TotalHumusN</variable>
          <variable>biom_n() as TotalBiomN</variable>
          <variable>fom_N() as TotalFomN</variable>
          <variable>surfaceom_n as SurfaceOMN</variable>
          <variable>fertiliser as FertiliserN</variable>
          <variable>PlantFixedN as FixedN</variable>
          <variable>HarvestN as HarvestN</variable>
          <variable>dnit() as DenitrifiedN</variable>
          <variable>leach_no3 as LeachedN</variable>
          <variable>NitrogenUptake as UptakeN</variable>
          <variable>PlantRemobilisedN as NitrogenRemobilisedSenescence</variable>
          <variable>PlantLuxuryNRemobilised as NitrogenRemobilisedLuxury</variable>
          <variable>PlantGrowthN as ActualGrowthN</variable>
          <variable>LitterDepositionN as LitterDepositionN</variable>
          <variable>RootSenescenceN as RootSenescenceN</variable>
          <variable>sw_dep() as TotalSoilWater</variable>
          <variable>rain as Rain</variable>
          <variable>irrigation as Irrigation</variable>
          <variable>runoff as Runoff</variable>
          <variable>drain as Drainage</variable>
          <variable>es as Evaporation</variable>
          <variable>WaterUptake as WaterUptake</variable>
          <variable>StandingPlantWt as Pasture.StandingWt</variable>
          <variable>PreHarvestDM as PreHarvestDM</variable>
          <variable>PostHarvestDM as PostHarvestDM</variable>
          <variable>harvested_dm as DefoliatedWt</variable>
          <variable>harvested_dm as HarvestedWt</variable>
          <variable>removed_dm as RemovedWt</variable>
          <variable>returned_dm as ReturnedWt</variable>
          <variable>harvested_n as DefoliatedN</variable>
          <variable>harvested_n as HarvestedN</variable>
          <variable>removed_n as RemovedN</variable>
          <variable>NReturnedInDung as NReturnedInDung</variable>
          <variable>NReturnedInUrine as NReturnedInUrine</variable>
          <variable>DaysAfterCut as DaysAfterCut</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
            <CheckedTitles> HerbageDigestibility, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> DefoliatedDigestibility, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SwardDefoliatedDigestibility, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SpeciesDeadDigestibility, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>DefoliatedDigestibility</Y>
            <Y>SwardDefoliatedDigestibility</Y>
            <Y>SpeciesDeadDigestibility</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <GraphReport name="Plant" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant">
        <Graph name="PlantWt" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantWt">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantWt/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantWt/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantN" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantN">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantN/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/PlantN/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="StandingWt" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/StandingWt">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/StandingWt/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/StandingWt/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="LAI" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/LAI">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/LAI/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Plant/LAI/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Harvest" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest">
        <Graph name="PlantDM" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/PlantDM">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/PlantDM/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/PlantDM/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMHarvestable" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMHarvestable">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMHarvestable/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMHarvestable/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMYield" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMYield">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMYield/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/DMYield/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Harvest" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Harvest">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Harvest/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Harvest/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Digestibility" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Digestibility">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Digestibility/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Harvest/Digestibility/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Growth" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth">
        <Graph name="Potential" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Potential">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Potential/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Potential/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Actual" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Actual">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Actual/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Actual/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Herbage" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Herbage">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Herbage/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Herbage/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Allocation" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Allocation">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Allocation/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Growth/Allocation/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="GLFs" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs">
        <Graph name="GLFTdamage" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTdamage">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTdamage/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTdamage/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFNcon" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFNcon">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFNcon/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFNcon/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFW" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFW">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFW/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFW/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFN" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFN">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFN/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFN/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFTemp" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTemp">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTemp/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/GLFTemp/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Radn" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/Radn">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/Radn/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/GLFs/Radn/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="NBalance" shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance">
        <Graph name="MineralN" shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/MineralN">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/MineralN/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/MineralN/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="OrganicN" shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/OrganicN">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/OrganicN/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/NBalance/OrganicN/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Uptake" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake">
        <Graph name="PlantWater" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantWater">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantWater/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantWater/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantNUptake" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantNUptake">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantNUptake/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/PlantNUptake/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Remobilisation" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/Remobilisation">
          <Plot name="Plot1" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/Remobilisation/Plot1">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/Remobilisation/Plot1/ApsimFileReader" />
          </Plot>
          <Plot name="Plot2" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/Remobilisation/Plot2">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/Uptake/Remobilisation/Plot2/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="WBalance" shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance">
        <Graph name="SWC" shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/SWC">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/SWC/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/SWC/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="InOuts" shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/InOuts">
          <Plot shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/InOuts/Plot">
            <GDApsimFileReader name="ApsimFileReader" shortcut="/Simulations/Ryegrass/AgPastureClassic/WBalance/InOuts/Plot/ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
    </area>
    <area name="AgPastureClassic">
      <folder name="Managers">
        <manager2 name="HarvestingAgPasture">
          <ui>
            <Dummy1 type="category" description="Setting up a harvesting rotation for AgPasture" />
            <CutPasture_StartDate type="ddmmmdate" description=" Enter the date to start the rotation (dd/mm/yyyy):">01/01/1900</CutPasture_StartDate>
            <CutPasture_EndDate type="ddmmmdate" description=" Enter the date to end the rotation (dd/mm/yyyy):">31/12/2100</CutPasture_EndDate>
            <Dummy2 type="category" description="Parameters defining the interval and amount to harvest" />
            <CutTriggerType type="list" listvalues="Fixed interval,Target interval,Target standing biomass" description=" Choose the trigger type, defines when harvests can occur:">Fixed interval</CutTriggerType>
            <Intervals2Cut type="text" description="   If trigger is interval between harvests, enter its value (days):">21</Intervals2Cut>
            <UpperThresholds type="text" description="   If trigger is the sward standing biomass, enter the amount (kgDM/ha):">2800</UpperThresholds>
            <RemoveAmountType type="list" listvalues="Set amount,Target amount,Given amounts down to residual DM,All herbage down to residual DM" description=" Choose how the amount to harvest will be defined:">All herbage down to residual DM</RemoveAmountType>
            <Amounts2Cut type="text" description="   If setting an amount, enter the value to harvest at each cut (kgDM/ha):">185</Amounts2Cut>
            <MinimumFraction type="text" description="      For target amount, enter the fraction of the target below which harvest is ignored (0-1):">0.33</MinimumFraction>
            <LowerThresholds type="text" description="   Enter the minimum residual standing biomass after cut (kgDM/ha):">1500</LowerThresholds>
            <Dummy3 type="category" description="Management of harvested material" />
            <ResidueTreatmentType type="list" listvalues="Return as residue,Return as dung &amp; urine" description=" Choose the treatment type for the harvested material:">Return as residue</ResidueTreatmentType>
            <DMRemovalOption type="list" listvalues="Based on herbage digestibility,type a fraction (0-1)" description=" Enter fraction of DM that is removed from the field (0-1):">1.0</DMRemovalOption>
            <FracN2Remove type="text" description=" Enter fraction of N that is removed from the field (0-1):">1.0</FracN2Remove>
            <Dummy4 type="category" description="   If returning residues as dung &amp; urine" />
            <UrineDepth type="text" description="    Enter the depth down to which urine will apllied (mm):">300</UrineDepth>
            <NinDungChoice type="list" listvalues="Set the proportion returned,Define the C:N ratio" description="    Choose how the N content in dung is defined:">Set the proportion returned</NinDungChoice>
            <FracN2Dung type="text" description="      If setting the proportion of N returned in dung, enter the value (0-1):">0.4</FracN2Dung>
            <CNratioDung type="text" description="      If defining the C:N ratio of dung, enter the value (approx. 10 to 20):">0.0</CNratioDung>
          </ui>
          <text>using System;
using ModelFramework;

//This manager sets up a cut/grazing rotation for AgPasture. It also handles the return of harvested material.
// The rotation is valid between two given dates only, these don't need to be bounded to the simulation dates (start date is set to simulation start date, if prior to it).
// Harvest is done on above ground standing DM, i.e. leaves plus stem/sheath (dead and green).
// Whether harvest can happen or not is evaluated in the first day (always), and thereof evaluations follow a trigger, varying for rotation types.
// + Cut trigger types:
//  - Fixed interval:
//     Cut is allowed at given days only (set by start rotation date and then at regular intervals);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is only allowed on the date selected, 'Can_Cut' is set to "no" at the end of the day;
//  - Target interval:
//     Cut is allowed from given days (begins at start rotation date and at regular intervals after last cut);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is allow from the date selected until something is harvested, only then 'Can_Cut' is set to "no";
//  - Target standing biomass:
//     Cut is allowed when existing DM reaches the target value;
//     Cut always happens, unless UpperThreshold is bellow the LowerThreshold (i.e. residual DM);
//     Cut is allowed until something is harvested (according to remove options), 'Can_Cut' is then set to "no";
//
// + Remove amount options:
//  - Set amount: The amount to remove is fixed, if this amount is not available, no cut is performed
//  - Target amount: The amount is the smallest of the given target value and difference between existing DM and the LowerThreshold (Residual DM);
//   » To avoid harvest of very small amounts a minimum fraction of the target value can be defined. If the existing amount is below that fraction the harvest is ignored.
//  - Given amounts down to residual DM: Amount to remove in a given day is given (which is limited to the difference to the minimum residual DM). However, harvest only stops
//    when standing DM reaches the LowerThreshold.  The minimum fraction to remove is also applied here to avoid very small amounts;
//  - All herbage down to residual DM: Amount to remove is the difference between existing DM and minimum residual DM (LowerThreshold);
//
// + Residue management options:
//  - Return as residue: A fraction of the DM harvested (plus the N on it) is added as grass residue to the surfaceOM module;
//  - Return as dung &amp; urine: A fraction of the amount harvested is returned to the soil as evenly distributed urine (urea) and dung;
//     This is a very simplified approach where the fractions of DM (i.e. carbon) and N to be removed are set separately. 
//     The fraction of dry matter (or carbon) to be removed can be set (0-1) or allowed to be calculated based on herbage digestibility.
//     The partition of N between urine and dung is set by the user by defining how N in dung is computed.
//     The DM and N to be returned as dung are added to surfaceOM 'RuminantDung_PastureFed'.
//     N urine is added as urea fertiliser, distributed from surface down to  a given depth. The proportion per layer decreases linearly with depth.
//  + Defining the N content in dung:
//    - Set proportion returned: A fraction of N not removed from the field is returned in the dung. The proportion returned as dung should be given.
//    - Define the C:N ratio: The C:N ratio for dung can be defined. Note that this option may alter the amount returned as urine (to ensure mass balance).

// » The values for few parameters can be entered as an array, these are interpreted as defining the rotation within a year, so the first value is assumed to be for 01/Jan,
//    the last value is for 31/Dec, and the values in between are spread evenly over the year. The value of the parameter for each day of the year is calculated 
//    dynamically by linear interpolation.  The parameters that can be set up as arrays are:
//    - Interval between harvests (Interval2Cut)
//    - The DM amount to trigger a harvest (UpperThreshold)
//    - The amount to remove on each harvest (Amount2Cut)
//    - The residual DM after harvest (LowerThreshold)

//--&gt;  Last uptaded in: 01/Oct/2015 ..................

public class Script
{
   //Parameter variables:
   [Param] private DateTime CutPasture_StartDate;  //Date to start the cutting rotation
   [Param] private DateTime CutPasture_EndDate;    //Date to end cutting rotation

   [Param] private string CutTriggerType;          //The cut trigger type (Fixed interval,Target interval,Target standing biomass)
   [Param] private double[] Intervals2Cut;         //The interval between cuts, used if cut trigger type is by interval (days), (values will be interpolated using DoY)
   [Param] private double[] UpperThresholds;       //The standing biomass amount to trigger a cut, if cut type is target biomass (kg/ha, standing DM [leaf+stem/sheath]), (values will be interpolated using DoY)

   [Param] private string RemoveAmountType;        //The way to compute how much pasture is cut (Set amount,Target amount,Given amounts down to residual DM, All herbage down to residual DM)
   [Param] private double[] Amounts2Cut;           //The amount of DM to be removed at each cut, limited to residual DM (LowerThreshold) (kg/ha, DM above ground), (values will be interpolated using DoY)
   [Param] private double MinimumFraction;         //The minimum fraction of harvest amount that is meaningful, below which harvest is ignored (for target amount)
   [Param] private double[] LowerThresholds;       //The minimum residual DM amount left after cut (kg/ha, DM above ground), (values will be interpolated using DoY)

   [Param] private string ResidueTreatmentType;    //The treatment to the material cut (Return as residue,Return as dung &amp; urine)
   [Param] private string DMRemovalOption;         //The option to define DM to remove (Based on herbage digestibility,type a fraction (0-1))
   [Param] private double FracN2Remove;            //Fraction of the N in the material cut that is removed from simulation (0-1)
   
   [Param] private double UrineDepth;              //The depth down to which urine will be applied (mm), proportion applied per layer decrease with depth
   [Param] private string NinDungChoice;           //The way N in dung is defined (Set proportion returned,Set CN ratio)
   [Param] private double FracN2Dung;              //The fraction of returned N that goes into dung, if return is as dung &amp; urine (0-1)
   [Param] private double CNratioDung;             //The C:N ratio of dung, if return is as dung and urine (~10-20)

   //Links and events:
   [Link] private Component MySelf;
   [Link] private AgPasture MyAgPasture;
   [Link] private Fertiliser MyFertiliser;
   [Link] private SurfaceOM MySurfaceOM;
   
   //Variables read from other modules
   [Input] private DateTime Today;     //Today's date
   [Input] private double[] dlayer;    //Today's day of year

   //Outputs
   [Output][Units("")] public string Can_Cut;                  //Whether today is a harvesting day
   [Output][Units("")] public string Has_Cut;                  //Whether today's harvest was done
   [Output][Units("kg/ha")] public double harvested_dm;        //Pasture DM harvested today (kg/ha)
   [Output][Units("kgN/ha")] public double harvested_n;        //N harvested today
   [Output][Units("kg/ha")] public double removed_dm;          //DM removed from the paddock
   [Output][Units("kgN/ha")] public double removed_n;          //N removed from the paddock
   [Output][Units("kgN/ha")] public double returned_dm;        //DM returned to the paddock
   [Output][Units("kgN/ha")] public double returned_n;         //N returned to the paddock
   [Output][Units("kgN/ha")] public double NReturnedInDung;    //N returned as dung (SurfaceOM)
   [Output][Units("kgN/ha")] public double NReturnedInUrine;   //N returned as urine (urea)
   [Output][Units("kg/ha/day")] public double GrowthRateCalc;  //Average growth rate for this cut
   [Output][Units("days")] public int DaysAfterCut;            //Number of days after last harvest
   [Output][Units("kg/ha")] public double PreHarvestDM;        //Total standing DM (Leaf + Stem/Sheath) before cut
   [Output][Units("kg/ha")] public double PostHarvestDM;       //Total standing DM (Leaf + Stem/Sheath) after cut
   [Output][Units("kg/ha")] public double ResidualDM;          //Today's residual DM
   [Output][Units("kg/ha")] public double TriggerDM;           //Today's trigger DM
   [Output][Units("kg/ha")] public double HarvestAmount;       //Today's DM amount to harvest
   [Output][Units("days")] public int CutInterval;             //Todays cut interval

   //Internal variables
   private double FracDM2Remove;       //The fraction of DM to be removed from the simulation (0-1)   
   private bool CutIsAllowed;          //Whether cutting are allowed
   private int[] LowerThresholdDays;   //The DoY for each value of lower threshold
   private int[] UpperThresholdDays;   //The DoY for each value of upper threshold
   private int[] Amount2HarvestDays;   //The DoY for each amount to cut given
   private int[] CutIntervalDays;      //The DoY for each given cut interval
   private double[] FracLayer;         //The fraction of urine to be applied in each layer

   [EventHandler()]
   public void OnInitialised()
   {
      //Set the arrays with days
      LowerThresholdDays = setDays(LowerThresholds.Length);
      UpperThresholdDays = setDays(UpperThresholds.Length);
      Amount2HarvestDays = setDays(Amounts2Cut.Length);
      CutIntervalDays = setDays(Intervals2Cut.Length);
      
      //Reset variables
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      DaysAfterCut = CutInterval - 1;
      CutIsAllowed = false;
      Can_Cut = "no";
      Has_Cut = "no";

      //The fraction of DM to remove
      // - DMRemovalOption can be a value (0-1 = FracDM2Remove) or a string, which tell us that FracDM2Remove is based on digestibility
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      else
      {
         try
         {
            FracDM2Remove = Convert.ToDouble(DMRemovalOption);
            if ((FracDM2Remove &lt; 0.0) || (FracDM2Remove &gt; 1.0))
            {
               throw new Exception("Fraction of DM to remove is out of bounds");
            }
         } 
         catch 
         {
            throw new Exception("Fraction of DM to remove is not valid");
         }
      }
      
      //The fraction of N to remove
      if ((FracN2Remove &lt; 0.0) || (FracN2Remove &gt; 1.0))
      {
         throw new Exception("Fraction of N to remove is out of bounds");
      }
      
      //How to return residues (DM and N)
      if (ResidueTreatmentType.Contains("urine")) 
      {
         if (NinDungChoice.Contains("proportion")) 
         {
            if ((FracN2Dung &lt; 0.0) || (FracN2Dung &gt; 1.0))
            {
               throw new Exception("Proportion of N to return as dung is out of bounds");
            }
         } 
         else if (NinDungChoice.Contains("CN ratio")) 
         {
            if ((CNratioDung &lt; 0.0) || (CNratioDung &gt; 50.0))
            {
               throw new Exception("C:N ratio of dung is out of bounds");
            }
         } 
         else
         {
            throw new Exception("Choice for setting N content in dung is not valid");
         }
      }

      //compute the fraction of urine to be aplied per layer
      if (ResidueTreatmentType.Contains("urine"))
      {
         FracLayer = new double[dlayer.Length];
         double DepthFromSurface = 0.0;
         double dltZ = 0.0;
         for (int z = 0; z &lt; dlayer.Length;z++)
         {
            if(DepthFromSurface &lt; UrineDepth)
            {
               dltZ = Math.Min(dlayer[z], UrineDepth - DepthFromSurface);
               FracLayer[z] = 2 * dltZ * (1 - ((DepthFromSurface + 0.5 * dltZ) / UrineDepth)) / UrineDepth;
            }
            DepthFromSurface += dlayer[z];
         }
      }
      //Check whether choices are allowed and prepare messages     
      string myMessage1;
      string myMessage2 = "     remove ";
      switch (CutTriggerType.ToLower())
      {
         case "fixed interval":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            } 
            else
            {
               myMessage2 += RemoveAmountType.ToLower() + " (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut only every " + CutInterval.ToString() + " days";
            break;
         case "target interval":
            if (RemoveAmountType.ToLower().Contains("amount"))
            {               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else

               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut every " + CutInterval.ToString() + " days, or when possible";
            break;
         case "target standing biomass":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut when DM reaches " + TriggerDM + " kgDM/ha";
            break;
         default:
            throw new Exception("Cut trigger type is not valid");
      }

      //write messages on summary file
      Console.WriteLine("");
      Console.WriteLine("   Harvesting rotation for AgPasture initialised");
      Console.WriteLine("     rotation rule valid between " + CutPasture_StartDate.ToString("dd/MM/yyyy") + " and " + CutPasture_EndDate.ToString("dd/MM/yyyy"));
      Console.WriteLine("     rotation type: " + CutTriggerType.ToLower() + myMessage1);
      Console.WriteLine(myMessage2);
      if (DMRemovalOption.Contains("digestibility"))
      {
         myMessage1 = DMRemovalOption.ToLower();
      }
      else
      {
         myMessage1 = ((1.0 - FracDM2Remove) * 100).ToString("#0.0") + "%";
      }
      Console.WriteLine("     fraction of harvested DM to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      myMessage1 = ((1.0 - FracN2Remove) * 100).ToString("#0.0") + "%";
      if (FracN2Remove &lt; 0.999999)
      {
         myMessage1 += " (" + ((1.0 - FracN2Dung) * 100).ToString("#0.0") + "% of it as urine)";
      }
      Console.WriteLine("     fraction of harvested N to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      if (ResidueTreatmentType.Contains("urine"))
      {
         Console.WriteLine("     proportion of urine N to be added in each layer:");
         myMessage1 = FracLayer[0].ToString("0.000");
         for (int z = 1;z &lt; dlayer.Length;z++)
         {
            myMessage1 += ", " + FracLayer[z].ToString("0.000");
         }
         Console.WriteLine("      " + myMessage1);
      }
      Console.WriteLine("");
   }

   [EventHandler()]
   public void OnPrepare()
   {
      double Amount2Harvest;
      double AmountHarvestable;
      double ExistingDM;

      //Reset variables:
      Has_Cut = "no";
      harvested_dm = 0.0;
      harvested_n = 0.0;
      removed_dm = 0.0;
      removed_n = 0.0;
      returned_dm = 0.0;
      returned_n = 0.0;
      GrowthRateCalc = 0.0;
      NReturnedInDung = 0.0;
      NReturnedInUrine = 0.0;
      DaysAfterCut = DaysAfterCut + 1;
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      ExistingDM = MyAgPasture.StandingPlantWt;

      //Decide whether cut is allowed:
      if ((Today.Date &gt;= CutPasture_StartDate.Date) &amp;&amp; (Today.Date &lt;= CutPasture_EndDate.Date))
      {
         switch (CutTriggerType.ToLower())
         {
            case "fixed interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset in the end of the day
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               else
               {
                  CutIsAllowed = false;
                  //always reset CutIsAllowed
               }
               break;
            case "target interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset only if cut actually happens (depends on amount type)
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               break;
            case "target standing biomass":
               //Send an CutIsAllowed if existing DM amount is above the target (TriggerDM/UpperThreshold), it will be reset if cut actually happens
               if (ExistingDM &gt;= TriggerDM)
               {
                  CutIsAllowed = true;
               }
               break;
         }

         //The use of these avoid (or at least reduces) problems when two managers are used in the same simulation
         if (CutIsAllowed)
         {
            Can_Cut = "yes";
         }
         else
         {
            Can_Cut = "no";
         }
         
         //Decide how much to cut:
         if (CutIsAllowed)
         {
            PreHarvestDM = MyAgPasture.StandingPlantWt;

            switch (RemoveAmountType.ToLower())
            {
               case "set amount":
                  Amount2Harvest = HarvestAmount;
                  if (CutTriggerType.ToLower() == "fixed interval")
                  {
                     AmountHarvestable = PreHarvestDM;
                  }
                  else
                  {
                     AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  }
                  break;
               case "target amount":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "given amounts down to residual dm":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "all herbage down to residual dm":
                  Amount2Harvest = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               default:
                  throw new Exception("Option to compute DM amount to harvest is not valid");
            }

            //Decide whether cut actually happens:
            if ((AmountHarvestable &gt;= Amount2Harvest))
            {
               CutPasture(Amount2Harvest);
               HandleResidues();
               //reset cut variables
               DaysAfterCut = 0;
               Has_Cut = "yes";
               GrowthRateCalc = harvested_dm / DaysAfterCut;
               PostHarvestDM = MyAgPasture.StandingPlantWt;
               if (RemoveAmountType.Contains("amount"))
               { // check whether reamining amount is significant
                  if (Math.Abs(PostHarvestDM - ResidualDM) &lt; MinimumFraction * HarvestAmount)
                  {  
                     CutIsAllowed = false;
                  }
               }
               else
               {
                  CutIsAllowed = false;
               }
            }
         }
         else
         {
            Amount2Harvest = 0.0;
            AmountHarvestable = 0.0;
         }
      }
   }


   private void CutPasture(double Amount2Harvest)
   {
      // -- Cutting pasture ----------------------------------------------------------------------------

      GrazeType CutData = new GrazeType();
      CutData.sender = MySelf.Name;
      CutData.amount = (float) Amount2Harvest;
      CutData.type = "SetRemoveAmount";
      MyAgPasture.Graze(CutData);
      harvested_dm = MyAgPasture.HarvestWt;
      harvested_n = MyAgPasture.HarvestN;

      //Let user know (via summary) that a cut was made
      Console.WriteLine(Today.ToString("dd MMMM yyyy") + " (Day of year=" + Today.DayOfYear.ToString() + "), " + MySelf.Name + ":");
      Console.WriteLine("     Removing " + harvested_dm.ToString("#0") + "kg DM/ha, with " + harvested_n.ToString("#0.0") + "kg N/ha");
   }

   
   private void HandleResidues()
   {
      // -- Residue management -------------------------------------------------------------------------
      
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      removed_dm = harvested_dm * FracDM2Remove;
      removed_n = harvested_n * FracN2Remove;
      returned_dm = harvested_dm - removed_dm;
      returned_n = harvested_n - removed_n;

      if (returned_dm &lt; 0.0)
      {
         throw new Exception("Return_DM value is negative");
      }
      if (returned_n &lt; 0.0)
      {
         throw new Exception("Return_N value is negative");
      }

      if (ResidueTreatmentType.ToLower() == "return as residue")
      {
         if (FracDM2Remove &lt; 1.0)
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "grass";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) returned_n };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
      }
      else if (ResidueTreatmentType.ToLower() == "return as dung &amp; urine")
      {
         // It is advised that dung and urine return should be done using another manager or modules, such as 'UrinePatch' 

         if (NinDungChoice.Contains("proportion"))
         {
            NReturnedInDung = returned_n * FracN2Dung;
         }
         else if (NinDungChoice.Contains("CN ratio"))
         {
            NReturnedInDung = returned_dm / CNratioDung;
         }
         NReturnedInUrine = Math.Max(0.0, returned_n - NReturnedInDung);

         if (NReturnedInDung &gt; returned_n)
         {
            throw new Exception("Amount of N to return as dung is larger than total return, check proportion or CN ratio");
         }

         if ((returned_dm &gt; 0.0) || (NReturnedInDung &gt; 0.0))
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "RuminantDung_PastureFed";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) NReturnedInDung };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
         
         if (NReturnedInUrine &gt; 0.0)
         {
            FertiliserApplicationType UrineData = new FertiliserApplicationType();
            UrineData.Amount = (float) NReturnedInUrine;
            UrineData.Depth = 10;   // mm
            UrineData.Type = "urea_n";
            MyFertiliser.Apply(UrineData);
         }
      }
      else
      {
         throw new Exception("Residue management type is not valid");
      }
   }

   private int[] setDays(int NumDates)
   {
      //Define the day of year for each value on am array, given the arra's length - first value, day=1; last value day = 365; dates in between spread evenly (rounded)
      int[] xArray;
      if (NumDates &lt; 366)
      {
         xArray = new int[NumDates];
         xArray[0] = 1;
         if (NumDates &gt; 1)
         {
            xArray[NumDates - 1] = 365;
            if (NumDates &gt; 2)
            {
               for (int i = 1; i &lt; NumDates - 1; i++)
               {
                  xArray[i] = 365 * i / (NumDates);
               }
            }
         }
      }
      else
      {
         throw new Exception("Number of items on CoverTarget greater than maximum allowed (365)");
      }
      
      return xArray;
   }

   private double InterpolateVals(int my_x, int[] xArray, double[] yArray)
   {
      //Find out the value correspondig to my_x in the function described by the x and y arrays
      double my_y = 0.0;
      int iN = xArray.Length - 1;
      if (my_x &lt;= xArray[0])
      {
         //values below x[0] are set to y[0]
         my_y = yArray[0];
      }
      else if (my_x &gt;= xArray[iN])
      {
         //value above x(n) are set to y(n)
         my_y = yArray[iN];
      }
      else
      {
         //find the nearest neighbours and interpolate (linear)
         for (int i = 1; i &lt;= iN; i++)
         {
            if (my_x &lt;= xArray[i])
            {
               my_y = yArray[i - 1] + ((my_x - xArray[i - 1]) * (yArray[i] - yArray[i - 1]) / (xArray[i] - xArray[i - 1]));
               i = xArray.Length;
            }
         }
      }
      
      return my_y;
   }
}
</text>
        </manager2>
        <manager2 name="FertOnSoilNCriteria">
          <ui>
            <category type="category" description="Fertiliser application based on Soil N amount" />
            <FertAllowed type="yesno" description="Turn ferliser applications on?">yes</FertAllowed>
            <FertDepth2SoilN type="text" description="Depth to calculate available soil N (mm):">500</FertDepth2SoilN>
            <FertCriticalSoilN type="text" description="Minimum available N, triggers an application (kgN/ha):">5</FertCriticalSoilN>
            <FertNAmount type="text" description="Amount of N fertiliser for each application (kgN/ha):">25</FertNAmount>
            <FertType type="list" listvalues="no3_n,nh4_n,nh4no3,urea_n,urea_no3,urea,nh4so4_n,rock_p,banded_p,broadcast_p" description="Type of N fertiliser to apply:">urea_n</FertType>
            <FertApplicationDepth type="text" description="Depth at which to apply the fertiliser (mm):">1</FertApplicationDepth>
            <FertMinimumDays type="text" description="Minimum period between applications (days):">15</FertMinimumDays>
          </ui>
          <text>Imports System
Imports ModelFramework

Public Class Script 
   &lt;Link()&gt; Dim MyPaddock As Paddock
   &lt;Link()&gt; Dim Fert As Fertiliser

   'Parameters - user inputs from the Properties tab
   &lt;Param&gt; Private FertAllowed As String           'Whether fertilisation is allowed at all
   &lt;Param&gt; Private FertDepth2SoilN As Double       'Depth in the soil to calculate the N storage
   &lt;Param&gt; Private FertCriticalSoilN As Double     'Minimum soil N, below which fertiliser application is triggered
   &lt;Param&gt; Private FertNAmount As Double           'Amount of N fertiliser per application
   &lt;Param&gt; Private FertType As String              'Type of fertiliser to apply
   &lt;Param&gt; Private FertApplicationDepth As Double  'Depth in the soil that the fertilser will be applied
   &lt;Param&gt; Private FertMinimumDays As Double       'Minimum interval between appplications

   'Inputs - got by this Manager from elsewhere in APSIM
   &lt;Input&gt; Private Today As DateTime            'Today's date from APSIM 
   &lt;Input&gt; Private dlayer As Double()           'Array of soil layer thicknesses - for calculation of mineral N in the soil
   &lt;Input&gt; Private no3 As Double()              'Array of nitrate-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil
   &lt;Input&gt; Private nh4 As Double()              'Array of ammonium-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil
   &lt;Input&gt; Private urea As Double()             'Array of urea-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil

   'Outputs - calculated by this Manager and available to be output by the user
   &lt;Output&gt; Private TopMineralN As Double       'Mineral-N stored in the soil to a depth of FertDepth2SoilN

   'Other variables that are calculated but not needed for outputs
   Private LayerWeights As Double()             'Weigthing of each layer for FertCriticalSoilN calculation
   Private lastApplicationDate As DateTime
   Private fertiliserIsAllowed As Boolean
   Private nLayers As Integer
   Private daysSinceLastApplication As Double

   &lt;EventHandler()&gt; Public Sub OnInit2()
      '"OnInit2" is an event handler gets called once at the start of the simulation 

      fertiliserIsAllowed = (FertAllowed.ToLower = "yes")
      nLayers = dLayer.Length

   End Sub

   &lt;EventHandler()&gt; Public Sub OnPrepare()
      '"OnPrepare" is an event handler gets called once at the start of every day (before Prepare and Post) 

      daysSinceLastApplication = (Today - lastApplicationDate).TotalDays

      ' get the N stored in the soil
      Dim depthFromSurface As Double = 0.0
      Dim fracLayer As Double = 0.0
      TopMineralN = 0.0
      For layer As Integer = 0 To nLayers
         fracLayer = Math.Min(1.0, (FertDepth2SoilN - depthFromSurface) / dlayer(layer))
         TopMineralN += (NO3(layer) + NH4(layer) + Urea(layer)) * fracLayer
         depthFromSurface += dlayer(layer)
         If (depthFromSurface &gt;= FertDepth2SoilN)
            layer = nLayers
         End If
      Next

      ' Check whether a fertiliser application is due
      If (fertiliserIsAllowed And daysSinceLastApplication &gt;= FertMinimumDays And TopMineralN &lt;= FertCriticalSoilN) Then
         Fert.Apply(FertNAmount, FertApplicationDepth, FertType)
         lastApplicationDate = Today
      End If

   End Sub

End Class
   </text>
        </manager2>
        <manager2 name="CentrePivotIrrigation">
          <ui>
            <Dummy type="category" description="Centre Pivot Irrigation Manager" />
            <AllowIrrigation type="yesno" description=" Turn irrigation on?">no</AllowIrrigation>
            <Dummy type="category" description="General irrigation parameters" />
            <Irrigation_start_date type="ddmmmdate" description=" Start of irrigation season (dd-mmm):">15-Sep</Irrigation_start_date>
            <Irrigation_end_date type="ddmmmdate" description=" End of irrigation season (dd-mmm):">30-May</Irrigation_end_date>
            <DepthToCalcPAW type="text" description=" Enter the soil depth to which water deficit is computed (mm):">300</DepthToCalcPAW>
            <CritRainToPause type="text" description=" Critical rainfall - amount over 3 days after which irrigation is paused (mm):">30</CritRainToPause>
            <DaysToPauseOnCritRain type="text" description=" Number of days irrigation is paused once critical rainfall is reached (days):">3</DaysToPauseOnCritRain>
            <IrrigSetup type="list" listvalues="specify,calculate" description=" Select whether irrigation setup is specified or calculated internally">specify</IrrigSetup>
            <category type="category" description="Irrigation setup (if not to calculate)" />
            <IrrigTrigger type="text" description=" Soil water deficit at which irrigation starts (mm):">30</IrrigTrigger>
            <IrrigUpperThreshold type="text" description=" Soil water deficit at which irrigation stops, daily amount is added regardless (mm):">0</IrrigUpperThreshold>
            <IrrigAmount type="text" description=" Amount of irrigation to apply (mm/day):">6</IrrigAmount>
            <IrrigDuration type="text" description=" Duration of each irrigation event (min):">1440</IrrigDuration>
            <IrrigReturn type="text" description=" Irrigation return period (days):">1</IrrigReturn>
            <IrrigEfficiency type="text" description=" Irrigation efficiency (%):">100</IrrigEfficiency>
          </ui>
          <text>Imports System
Imports ModelFramework

'This manager applies irrigation following rules mimicking a centre-pivot management.
' Irrigation parameters can be given or be left to be calculated by the module (based on the soil PAW)

'--&gt;  Last uptaded in: 15/Nov/2014 ..................


Public Class Script 
   
   'Parameter variables:
   &lt;param&gt; Private AllowIrrigation As String                   'Indicates whether irrigation is on (yes) or off (no)
   &lt;param&gt; Private Irrigation_start_date As String             'Start of the irrigation season (dd-mmm)
   &lt;param&gt; Private Irrigation_end_date As String               'End of the irrigation season (dd-mmm)
   &lt;param&gt; Private DepthToCalcPAW As Double                    'Depth to consider plant available water, and deficit (mm)
   &lt;param&gt; Private CritRainToPause As Double                   'Value of rain (sum over 3 days) when irrigation is paused (mm)
   &lt;param&gt; Private DaysToPauseOnCritRain As Double             'Number of days irrigations is paused when CritRain is reached
   &lt;param&gt; Private IrrigSetup As String                        'Define wheter the irrgation parameters are define by user of calculated
   &lt;param&gt; Private IrrigTrigger As Double                      'User defined irrigation trigger (mm)
   &lt;param&gt; Private IrrigUpperThreshold As Double               'User defined water deficit at which irrigation stops, daily amount is added regardless (mm):
   &lt;param&gt; Private IrrigAmount As Double                       'User defined irrigation amount (mm)
   &lt;param&gt; Private IrrigDuration As Double                     'User defined duration of irrigation (minutes)
   &lt;param&gt; Private IrrigReturn As Double                       'User defined irrigation return period (days)
   &lt;param&gt; Private IrrigEfficiency As Double                   'User defined irrigation efficiency (%)

   'Link to other modules:
   &lt;Link&gt; Private Irrigator As Irrigation   
   
   'Variables read from other modules
   &lt;Input&gt; Private today As DateTime                           'Today's date
   &lt;Input&gt; Private dlayer As Double()                          'Thickness of soil layers (mm)
   &lt;Input&gt; Private rain As Double                              'Rainfall (mm)
   &lt;Input&gt; Private sw_dep As Double()                          'Soil water content (mm)
   &lt;Input&gt; Private dul_dep As Double()                         'Soil water content at DUL (mm)
   &lt;Input&gt; Private ll15_dep As Double()                        'Soil water content at LL15 (mm)

   'Output variables
   &lt;Output&gt;&lt;Units("mm")&gt; Public SoilWaterDeficit As Double          'Soil water deficit (mm)
   &lt;Output&gt;&lt;Units("days")&gt; Public DaysAfterIrrigation As Double     'The number of days after irrigation was applied
   &lt;Output&gt;&lt;Units("mm")&gt; Public SoilPAWforIrrigation As Double      'The soil plant available water (mm)
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationTrigger As Double         'The soil water deficit that triggers irrigation (mm)
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationUpperThreshold As Double  'The soil water deficit for stopping irrigation (mm)
   &lt;Output&gt;&lt;Units("days")&gt; Public IrrigationReturnPeriod As Integer 'The return period for irrigation
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationAmount As Double          'The amount of water to add in an irrigation event (mm/day)
   &lt;Output&gt;&lt;Units("min")&gt; Public IrrigationDuration As Double       'The duration of each irrigation event (min/day)
   &lt;Output&gt;&lt;Units("%")&gt; Public IrrigationEfficiency As Double       'The irrigaton efficiency (%)
   &lt;Output&gt;&lt;Units("mm")&gt; Public RainOnPrevious3Days As Double       'The amount of rainfall over the previous 3 days
   &lt;Output&gt;&lt;Units("days")&gt; Public Days2Pause As Double              'The number of days that irrigation is paused due to large rainfall

   'Internal variables
   Private StartDate As Date                                   'The date when irrigation start (in date format)
   Private EndDate As Date                                     'The date when irrigation finish (in date format)
   Private RainOnPreviousDays(2) As Double                     'Record the rain of the previous 3 days (mm)
   Private IrrigationRequired As Boolean
      
   &lt;EventHandler()&gt; Public Sub OnInitialised()

      'check the presence of the irrigation module and one of the soil modules
      Call CheckModules()
      
      'Put the dates into date format:
      StartDate = Date.Parse(Irrigation_start_date)
      EndDate = Date.Parse(Irrigation_end_date)

      DaysAfterIrrigation = IrrigationReturnPeriod
      IrrigationRequired = False
      
      'Zero rain on previous 3 days
      RainOnPrevious3Days = 0.0
      Array.Clear(RainOnPreviousDays, 0, RainOnPreviousDays.Length)

      'Calculate soil PAW for irrigation
      Dim DepthFromSurface As Double = 0
      SoilPAWforIrrigation = 0.0
      For z As Integer = 0 To dlayer.length - 1
         If DepthFromSurface &lt; DepthToCalcPAW Then
            Dim FractionLayer As Double = math.Min(1, math.Max(0, DepthToCalcPAW - DepthFromSurface) / dlayer(z))
            '  if depth does not coincide with the end of the layer, only a corresponding fraction of it is used
            SoilPAWforIrrigation += (dul_dep(z) - ll15_dep(z)) * FractionLayer
         Else
            z = dlayer.Length - 1
         End If
         DepthFromSurface += dlayer(z)
         'DepthFromSurface = DepthFromSurface + dlayer(z)
      Next
      
      Dim IrrigParamType As String
      If IrrigSetup.ToLower = "specify" Then
         'Irrgation parameters are given by the user (no check is made on their values)
         IrrigParamType = "specified by user"
         IrrigationTrigger = IrrigTrigger
         IrrigationUpperThreshold = IrrigUpperThreshold
         IrrigationAmount = IrrigAmount
         IrrigationDuration = IrrigDuration
         IrrigationReturnPeriod = IrrigReturn
         IrrigationEfficiency = IrrigEfficiency
      Else 'IrrigSetup = "calculate"
         'Determine the irrigation parameters based on soil PAW and equipment type
         IrrigParamType = "calculated by manager"
         '  Assumptions:  -capacity to supply water is not limiting (pump and pipes are well dimensioned)
         '                -irrigation ideally starts when soil available water is half of PAW, but trigger is limited to between 10 and 40mm
         '                -amount of irrigation applied aim to fill up to 90% of PAW, but is limited between 10 and 30mm/day
         '                -rotation of the pivot is function of a fixed irrigation rate (7.5mm/day)
         '                -duration is function ofthe rotation period and nozzle size (5m = wetted span, equals ~1.5 degress at a radius of 200m)
         '                -the efficiency is function of PAW, set a minimum of 70% and a maximum of 90%, and the rate of change (slope) is 0.15.
         IrrigationTrigger = Math.Min(40.0, Math.Max(10.0, SoilPAWforIrrigation / 2.0))
         IrrigationAmount = Math.Max(10.0, Math.Min(30.0, 0.9 * SoilPAWforIrrigation - IrrigationTrigger))
         IrrigationUpperThreshold = Math.Max(1.0, SoilPAWforIrrigation - IrrigationAmount)
         IrrigationReturnPeriod = Math.Round(IrrigationAmount / 7.5)
         IrrigationDuration = IrrigationReturnPeriod * 1440 * (1.5 / 360)
         IrrigationEfficiency = Math.Min(90.0, 70.0 + 0.15 * SoilPAWforIrrigation)
      End If

      Console.WriteLine("")
      If AllowIrrigation.ToLower = "yes" Then
         Console.WriteLine("   Irrigation by centre-pivot is enabled")
         Console.WriteLine("     Parameters have been " &amp; IrrigParamType &amp; ":")
         Console.WriteLine("     - Irrigation season between " &amp; StartDate.ToString("dd MMMM") &amp; " and " &amp; EndDate.ToString("dd MMMM"))
         Console.WriteLine("     - Soil layer depth for calculating irrigation is " &amp; DepthToCalcPAW.ToString("0.0") &amp; " mm")
         Console.WriteLine("        With plant available water of " &amp; SoilPAWforIrrigation.ToString("0.0") &amp; " mm")
         Console.WriteLine("     - Amount applied per irrigation event: " &amp; IrrigationAmount.ToString("#0") &amp; " mm")
         Console.WriteLine("     - Duration of each irrigation event: " &amp; IrrigationDuration.ToString("#0") &amp; " min")
         Console.WriteLine("     - Soil water deficit to trigger irrigation: " &amp; IrrigationTrigger.ToString("#0") &amp; " mm")
         Console.WriteLine("     - Return period for irrigation system: " &amp; IrrigationReturnPeriod.ToString("#0") &amp; " days")
         Console.WriteLine("     - Efficiency of the irrigation system: " &amp; IrrigationEfficiency.ToString("0.0") &amp; " %")

      Else
         Console.WriteLine("   Irrigation by centre-pivot is disabled")
      End If
      Console.WriteLine("")

   End Sub

   
   &lt;EventHandler()&gt; Public Sub OnPrepare()
      
      'Calc the soil water deficit     
      Dim DepthFromSurface As Integer = 0
      SoilWaterDeficit = 0.0         
      For z As Integer = 0 To dlayer.length - 1
         If DepthFromSurface &lt; DepthToCalcPAW Then
            Dim FractionLayer As Double = math.Min(1, math.Max(0, DepthToCalcPAW - DepthFromSurface) / dlayer(z))
            '  if depth does not coincide with the end of the layer, only a corresponding fraction of it is used
            SoilWaterDeficit += Math.Max(0, math.Min(dul_dep(z) - ll15_dep(z), dul_dep(z) - sw_dep(z))) * FractionLayer
         Else
            z = dlayer.Length - 1
         End If
         DepthFromSurface += dlayer(z)
      Next
      SoilWaterDeficit = -SoilWaterDeficit
      
      'Decide whether to irrigate
      If AllowIrrigation.ToLower = "yes" Then
         'Calc the amount of rain today plus the previous two days
         RainOnPreviousDays(2) = RainOnPreviousDays(1)
         RainOnPreviousDays(1) = RainOnPreviousDays(0)
         RainOnPreviousDays(0) = rain
         RainOnPrevious3Days = RainOnPreviousDays(0) + RainOnPreviousDays(1) + RainOnPreviousDays(2)
            
         DaysAfterIrrigation = DaysAfterIrrigation + 1

         If isBetween(today, StartDate, EndDate) Then   'We are at the irrigation season     

            'Calc the number of days to pause irrigation after large rainfal events
            If RainOnPrevious3Days &gt;= CritRainToPause Then
               Days2Pause = DaysToPauseOnCritRain
            Else
               Days2Pause = math.Max(0, Days2Pause - 1)
            End If

            'Check whether irrigation is paused
            If Days2Pause &lt; 0.5 Then
               'Irrigation is not paused, check return period
               If DaysAfterIrrigation &gt; IrrigationReturnPeriod Then    'Irrigation is allowed
                  'Check whether soil needs irrigation
                  If SoilWaterDeficit &lt;= -IrrigationTrigger Then
                     IrrigationRequired = True
                  Else If SoilWaterDeficit &gt; -IrrigationUpperThreshold Then
                     IrrigationRequired = False
                  End If

                  If IrrigationRequired Then
                     Dim MyIrrigation As IrrigationApplicationType = New IrrigationApplicationType
                     MyIrrigation.Amount = IrrigationAmount / (IrrigationEfficiency * 0.01)
                     MyIrrigation.time = ""
                     MyIrrigation.Duration = 0
                     MyIrrigation.source = New String() {}
                     MyIrrigation.Crop_Area = 0
                     MyIrrigation.NH4 = 0
                     MyIrrigation.NO3 = 0
                     MyIrrigation.CL = 0
                     Irrigator.Variable("irrigation_efficiency").Set(IrrigationEfficiency * 0.01)
                     Irrigator.Apply(MyIrrigation)
                     DaysAfterIrrigation = 1
                     Console.WriteLine(Today.ToString("dd MMMM yyyy") + " (Day of year=" + Today.DayOfYear.ToString + "), Irrigation:")
                     Console.WriteLine("  Centre-pivot is applying irrigation. Amount = " &amp; MyIrrigation.Amount.ToString("0.0") &amp; " mm")
                  End If
               End If
            End If
         End If
      End If
         
   End Sub

   
   Private Function isBetween(ByVal today As Date, ByVal startdate As Date, ByVal enddate As Date) As Boolean
      
      'Check whether today is between the start and the end dates.  This is needed because start and end dates don't have year
      
      Dim date1 As Date = New Date(today.Year, startdate.Month, startdate.Day)
      Dim date2 As Date = New Date(today.Year, enddate.Month, enddate.Day)

      If (date1 &gt; date2) Then
         'Irrigation in the middle of the year - ex: summer in the northern hemisphere
         Return (today &gt;= date1 Or today &lt;= date2)
      Else
         'Irrigation in the end of the year - ex: summer in the southern hemisphere
         Return (today &gt;= date1 And today &lt;= date2)
      End If
      
   End Function


   Private Sub CheckModules()
   
      If Irrigator Is Nothing Then
         Throw New Exception("Centre pivot manager requires the presense of the irrigation module in the paddock")
      End If
      
   End Sub
   
End Class
</text>
        </manager2>
      </folder>
      <micromet name="Micromet">
        <soilalbedo type="text" description="soilalbedo">0.23</soilalbedo>
        <a_interception type="text" description="a_interception">0</a_interception>
        <b_interception type="text" description="b_interception">0</b_interception>
        <c_interception type="text" description="c_interception">0</c_interception>
        <d_interception type="text" description="d_interception">0</d_interception>
      </micromet>
      <irrigation name="Irrigation">
        <automatic_irrigation type="list" listvalues="on,off" description="Automatic irrigation">off</automatic_irrigation>
        <asw_depth type="text" description="Depth to which ASW is calculated. (mm)">600</asw_depth>
        <crit_fr_asw type="text" description="Fraction of ASW below which irrigation is applied (0-1.0)">0.5</crit_fr_asw>
        <irrigation_efficiency type="text" description="Efficiency of the irrigation. (0-1.0)">1</irrigation_efficiency>
        <irrigation_allocation type="list" listvalues="on,off" description="Allocation limits">off</irrigation_allocation>
        <allocation type="text" description="Allocation in mm">0</allocation>
        <default_no3_conc type="text" description="Nitrate concentration (ppm N)">0</default_no3_conc>
        <default_nh4_conc type="text" description="Ammonium concentration (ppm N)">0</default_nh4_conc>
        <default_cl_conc type="text" description="Chloride concentration (ppm Cl)">0</default_cl_conc>
      </irrigation>
      <fertiliser name="Fertiliser" />
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">AgPasture</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">grass</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">40</cnr>
        <cpr type="text" description="C:P ratio of initial residue (optional)" />
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <Soil name="SoilLismore">
        <RecordNumber>0</RecordNumber>
        <SoilType>NZ_Sedimentary</SoilType>
        <LocalName>Lismore</LocalName>
        <Site>Winchmore</Site>
        <NearestTown>Ashburton</NearestTown>
        <Region>Canterbury</Region>
        <Country>New Zealand</Country>
        <NaturalVegetation>0</NaturalVegetation>
        <ApsoilNumber>0</ApsoilNumber>
        <Latitude>-48.48</Latitude>
        <Longitude>0</Longitude>
        <LocationAccuracy>0</LocationAccuracy>
        <YearOfSampling>0</YearOfSampling>
        <DataSource>published soil profile description (as an example)</DataSource>
        <Analysis>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>10</double>
            <double>40</double>
            <double>60</double>
            <double>70</double>
            <double>70</double>
          </Rocks>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>12.5</double>
            <double>10</double>
            <double>9</double>
            <double>5</double>
            <double>4</double>
            <double>4</double>
            <double>4</double>
          </CEC>
          <ParticleSizeSand>
            <double>15</double>
            <double>20</double>
            <double>25</double>
            <double>35</double>
            <double>40</double>
            <double>40</double>
            <double>40</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>65</double>
            <double>65</double>
            <double>63</double>
            <double>57</double>
            <double>54</double>
            <double>55</double>
            <double>55</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>20</double>
            <double>15</double>
            <double>12</double>
            <double>8</double>
            <double>6</double>
            <double>5</double>
            <double>5</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.35</double>
            <double>1</double>
            <double>0.53</double>
            <double>0.31</double>
            <double>0.3</double>
            <double>0.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.12</double>
            <double>0.06</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </AirDry>
          <LL15>
            <double>0.15</double>
            <double>0.14</double>
            <double>0.06</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </LL15>
          <DUL>
            <double>0.36</double>
            <double>0.34</double>
            <double>0.19</double>
            <double>0.07</double>
            <double>0.04</double>
            <double>0.03</double>
            <double>0.03</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.43</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.11</double>
            <double>0.11</double>
            <double>0.11</double>
          </SAT>
          <KS>
            <double>5000</double>
            <double>2500</double>
            <double>3000</double>
            <double>10000</double>
            <double>17500</double>
            <double>20000</double>
            <double>20000</double>
          </KS>
          <SoilCrop name="agpasture">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="ryegrass">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="clover">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="slurp">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.02</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="agpastureLIFY">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>2</WinterCona>
          <WinterU>2</WinterU>
          <WinterDate>1-apr</WinterDate>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.5</double>
            <double>0.52</double>
            <double>0.55</double>
            <double>0.6</double>
            <double>0.65</double>
            <double>0.65</double>
            <double>0.65</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>3</double>
            <double>1</double>
            <double>0.6</double>
            <double>0.4</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.83</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.99</double>
            <double>0.99</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater name="Initial water">
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <RelativeTo>ll15</RelativeTo>
        </InitialWater>
        <Sample name="Initial nitrogen">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>2.5</double>
            <double>1</double>
            <double>0.8</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </NO3>
          <NH4>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <AgPasture name="Ryegrass">
        <Dummy1 type="category" description="Initial values for each species to be simulated" />
        <speciesToSimulate type="text" description="  Name of the species to be simulated:">Ryegrass</speciesToSimulate>
        <iniShootDM type="text" description="  Initial above ground dry matter weight (kgDM/ha):">2000</iniShootDM>
        <iniRootDM type="text" description="  Initial root dry matter weight (kgDM/ha):">500</iniRootDM>
        <iniRootDepth type="text" description="  Initial rooting depth (mm):">750</iniRootDepth>
        <WaterUptakeSource type="list" listvalues="calc,apsim" description="  Water uptake done by AgPasture (calc) or by apsim?:">calc</WaterUptakeSource>
        <Dummy2 type="category" description="Detailed parameters for each species (overwrites the xml file)" />
        <speciesName type="text" description=" Name of each parameterised species:">ryegrass</speciesName>
        <micrometType type="text" description=" Plant type for MicroMet/SWIM:">grass</micrometType>
        <photoPath type="text" description=" Photosynthesis pathway (C3=3, C4=4):">3</photoPath>
        <isLegume type="yesno" description=" Is this a legume species? (no=0, yes=1):">0</isLegume>
        <Pm type="text" description=" Reference photosynthesis rate - CO2 assimilation (mg CO2/m2.s):">1</Pm>
        <alphaPhoto type="text" description=" Leaf gross photosynthesis rate (mg CO2/J):">0.01</alphaPhoto>
        <thetaPhoto type="text" description=" Photosynthesis curve parameter (J/kg.s):">0.8</thetaPhoto>
        <fractionPAR type="text" description=" Fraction of radiation that is photosynthetic active (0-1):">0.5</fractionPAR>
        <lightExtCoeff type="text" description=" Light extinction coefficient (0-1):">0.5</lightExtCoeff>
        <growthTmin type="text" description=" Minimum temperature for growth (oC):">2</growthTmin>
        <growthTopt type="text" description=" Optimum temperature for growth (oC):">20</growthTopt>
        <growthTq type="text" description=" Curve parameter for growth response to temperature:">1.75</growthTq>
        <referenceCO2 type="text" description=" Reference atmospheric CO2 content for photosynthesis (ppm):">380</referenceCO2>
        <CO2PmaxScale type="text" description=" Scale factor for CO2 effect on photosynthesis (ppm):">700</CO2PmaxScale>
        <CO2NScale type="text" description=" Scale factor for CO2 effects on plant N concentration (ppm):">600</CO2NScale>
        <CO2NMin type="text" description=" Minimum reduction of plant N concentration under elevated CO2 (0-1):">0.7</CO2NMin>
        <CO2NCurvature type="text" description=" Curvature factor of CO2 effect on plant N concentration (&gt;1.0):">2</CO2NCurvature>
        <useHeatStress type="yesno" description=" Consider effects of high temperatures on photosynthesis? (yes/no):">yes</useHeatStress>
        <heatOnsetT type="text" description=" Onset temperature for heat effects on growth (oC):">28</heatOnsetT>
        <heatFullT type="text" description=" Temperature for full heat effects on growth (oC):">35</heatFullT>
        <heatSumT type="text" description=" Temperature sum for recovery from heat effects (oC):">30</heatSumT>
        <heatTq type="text" description=" Exponent for computing recovery from heat stress:">1</heatTq>
        <heatRecoverT type="text" description=" Base temperature for recovery from heat stress (oC):">25</heatRecoverT>
        <useColdStress type="yesno" description=" Consider effects of low temperatures on photosynthesis? (yes/no):">yes</useColdStress>
        <coldOnsetT type="text" description=" Onset temperature for cold effects on growth (oC):">0</coldOnsetT>
        <coldFullT type="text" description=" Temperature for full cold effects on growth (oC):">-3</coldFullT>
        <coldSumT type="text" description=" Temperature sum for recovery from cold effects (oC):">20</coldSumT>
        <coldTq type="text" description=" Exponent for computing recovery from cold stress:">1</coldTq>
        <coldRecoverT type="text" description=" Base temperature for recovery from cold effects (oC):">0</coldRecoverT>
        <growthEfficiency type="text" description=" Growth efficiency factor - photosynthesis minus growth respiration (0-1):">0.75</growthEfficiency>
        <maintRespiration type="text" description=" Maintenance respiration coefficient (%):">3</maintRespiration>
        <respTref type="text" description=" Reference temperature for maintenance respiration (oC):">28</respTref>
        <maxTeffectResp type="text" description=" Maximum effect of temperature on respiration (&gt;1.0):">1.25</maxTeffectResp>
        <MaxRootAllocation type="text" description=" Maximum biomass fraction that can be allocated to roots (0-1):">0.25</MaxRootAllocation>
        <TargetSRratio type="text" description=" Target or ideal shoot:root ratio:">4</TargetSRratio>
        <GlfEffectsOnSR type="text" description=" Coefficient controlling the maximum effect that soil GLFs have on Shoot:Root ratio (0-1):">0.5</GlfEffectsOnSR>
        <UseReproSeasonFactor type="yesno" description=" Whether DM allocation (shoot/root) should be adjusted for reproductive period (yes/no):">yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude type="text" description=" Reference latitude determining timing for reproductive season (degrees):">41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff type="text" description=" Coefficient controling the time to start the reproductive season as function of latitude:">0.14</ReproSeasonTimingCoeff>
        <ReproSeasonDurationCoeff type="text" description=" Coefficient controling the duration of the reproductive season as function of latitude:">2</ReproSeasonDurationCoeff>
        <ReproSeasonShouldersLengthFactor type="text" description=" Ratio between the length of shoulders and the period with full reproductive growth effect:">1</ReproSeasonShouldersLengthFactor>
        <ReproSeasonOnsetDurationFactor type="text" description=" The proportion of the length of shoulder before the period with full reproductive growth effect (0-1):">0.6</ReproSeasonOnsetDurationFactor>
        <ReproSeasonMaxAllocationIncrease type="text" description=" Maximum increase in DM allocation to shoot during reproductive growth (0-1):">0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff type="text" description=" Coefficient controling the increase in shoot allocation during reproductive growth as function of latitude:">0.1</ReproSeasonAllocationCoeff>
        <maxFLeaf type="text" description=" Maximum fraction of new shoot growth allocated to leaves (0-1):">0.7</maxFLeaf>
        <minFLeaf type="text" description=" Minimum fraction of new shoot growth allocated to leaves (0-1):">0.7</minFLeaf>
        <dmMaxFLeaf type="text" description=" Shoot DM for maximum leaf allocation, allocation decreases above that (kgDM/ha):">500</dmMaxFLeaf>
        <dmReferenceFLeaf type="text" description=" Reference DM, when allocation to leaves is midway max and min (kgDM/ha):">2000</dmReferenceFLeaf>
        <exponentFLeaf type="text" description=" Exponent of function describing DM allocation to leaves (&gt;0.0):">3</exponentFLeaf>
        <fStolon type="text" description=" Fraction of new shoot growth allocated to stolons (0-1):">0</fStolon>
        <liveLeavesPerTiller type="text" description=" Number of live leaves per tiller:">3</liveLeavesPerTiller>
        <SpecificLeafArea type="text" description=" Specific leaf area, per dry matter weight (m2/kgDM):">20</SpecificLeafArea>
        <SpecificRootLength type="text" description=" Specific root length, per dry matter weight (m/gDM):">75</SpecificRootLength>
        <rateLive2Dead type="text" description=" Reference tissue turnover rate for shoot (0-1):">0.05</rateLive2Dead>
        <facGrowingTissue type="text" description=" Factor for adjusting DM turnover of growing tissue (&gt;0.0):">2</facGrowingTissue>
        <refTurnoverRateStolon type="text" description=" Reference tissue turnover rate for stolon (0-1):">0</refTurnoverRateStolon>
        <rateDead2Litter type="text" description=" Reference littering rate - dead tissue to litter (0-1):">0.11</rateDead2Litter>
        <rateRootSen type="text" description=" Reference senescence rate for roots (0-1):">0.02</rateRootSen>
        <massFluxTmin type="text" description=" Minimum temperature for tissue turnover (oC):">2</massFluxTmin>
        <massFluxTopt type="text" description=" Optimum temperature for tissue turnover (oC):">20</massFluxTopt>
        <massFluxTq type="text" description=" Exponent of function for temperature effect on tissue turnover:">1</massFluxTq>
        <massFluxW0 type="text" description=" Scale factor for GLFWater effect on DM turnover (&gt;1.0):">2</massFluxW0>
        <massFluxWopt type="text" description=" Reference GLFwater for tissue turnover (0-1):">0.5</massFluxWopt>
        <massFluxDeadWq type="text" description=" Exponent to adjust GLFWater for senescing tissue (&gt;1.0):">3</massFluxDeadWq>
        <stockParameter type="text" description=" Parameter for stock influence on tissue senescence:">0.05</stockParameter>
        <Kappa2_Remob type="text" description=" Coefficient for remobilisation of luxury N from tissue2 (0-1):">0</Kappa2_Remob>
        <Kappa3_Remob type="text" description=" Coefficient for remobilisation of luxury N from tissue3 (0-1):">0</Kappa3_Remob>
        <Kappa4_Remob type="text" description=" Coefficient for partitioning non-used Nremob into tissue4 (0-1):">0</Kappa4_Remob>
        <digestLiveCellWall type="text" description=" Digestibility of live plant material (0-1):">0.6</digestLiveCellWall>
        <digestDeadCellWall type="text" description=" Digestibility of dead plant material (0-1):">0.2</digestDeadCellWall>
        <dmshoot type="text" description=" Default initial shoot dry matter weight (kgDM/ha):">1500</dmshoot>
        <dmroot type="text" description=" Default initial root dry matter weight (kgDM/ha):">450</dmroot>
        <dmgreenmin type="text" description=" Minimum allowable green dry matter weight (kgDM/ha):">300</dmgreenmin>
        <NconcOptimum_leaves type="text" description=" Optimum N concentration of young leaves (%):">4</NconcOptimum_leaves>
        <NconcMaximum_leaves type="text" description=" Maximum N concentration in leaves, with luxury uptake (%):">5</NconcMaximum_leaves>
        <NconcMinimum_leaves type="text" description=" Minimum N concentration in leaves, at senescence (%):">1.2</NconcMinimum_leaves>
        <RelativeNconc_Stems type="text" description=" Relative N concentration in stems, fraction of leaf N (0-1):">0.5</RelativeNconc_Stems>
        <RelativeNconc_Stolons type="text" description=" Relative N concentration in stolons, fraction of leaf N (0-1):">0</RelativeNconc_Stolons>
        <RelativeNconc_Roots type="text" description=" Relative N concentration in roots, fraction of leaf N (0-1):">0.5</RelativeNconc_Roots>
        <RelativeNconc_stage2 type="text" description=" Optimum N concentration for tissue2 (mature), relative to tissue1 (0-1):">1</RelativeNconc_stage2>
        <RelativeNconc_stage3 type="text" description=" Optimum N concentration for tissue3 (senescing), relative to tissue1 (0-1):">1</RelativeNconc_stage3>
        <NMinFix type="text" description=" Minimum N fixation, when soil N is sufficient (0-1):">0</NMinFix>
        <NMaxFix type="text" description=" Maximum N fixation, when no soil N is available (0-1):">0</NMaxFix>
        <NdilutCoeff type="text" description=" Coefficient for modifying the effect of N stress on plant growth (0-1):">0.5</NdilutCoeff>
        <waterStressFactor type="text" description=" coefficient for modifying the effect of water stress on plant growth (0-1):">1</waterStressFactor>
        <soilSatFactor type="text" description=" Coefficient for growth limitations due to soil moisture saturation (0-1):">0.1</soilSatFactor>
        <MinMacroPorosity type="text" description=" Minimum soil macroporosity (pores&gt;30um) for optimum plant growth (0-1):">-1</MinMacroPorosity>
        <GenericGLF type="text" description=" Generic relative growth limiting factor (0-1):">1</GenericGLF>
        <SFertilityGLF type="text" description=" Soil related generic growth limiting factor (0-1):">1</SFertilityGLF>
        <PreferenceForGreenDM type="text" description=" Weight factor defining the preference level for green DM (on removal):">1</PreferenceForGreenDM>
        <PreferenceForDeadDM type="text" description=" Weight factor defining the preference level for dead DM (on removal):">1</PreferenceForDeadDM>
        <PreferenceForLeaves type="text" description=" Weight factor defining the preference level for leaves over stems (on removal):">1</PreferenceForLeaves>
        <rootDepth type="text" description=" Default rooting depth (mm):">750</rootDepth>
        <ExpoLinearDepthParam type="text" description=" Depth from surface below which the proportion of roots starts to decrease (mm):">90</ExpoLinearDepthParam>
        <ExpoLinearCurveParam type="text" description=" Exponent to determine the distribution of root DM in the soil profile:">3.2</ExpoLinearCurveParam>
        <MinimumRootDepth type="text" description=" Root depth at germination (mm):">50</MinimumRootDepth>
        <RootElongationRate type="text" description=" Daily root elongation rate at optimum temperature (mm/day):">25</RootElongationRate>
        <MaxPlantHeight type="text" description=" Maximum average height for each species in a sward (mm):">500</MaxPlantHeight>
        <MassForMaxHeight type="text" description=" Mass above ground when maximum height is reached (kgDM/ha):">8000</MassForMaxHeight>
        <ExponentHeightFromMass type="text" description=" Exponent of function describing plant height as function of DM weight (&gt;1.0):">3</ExponentHeightFromMass>
        <MinimumHeight type="text" description=" Minimum plant height, for all species (mm):">20</MinimumHeight>
        <DegreesDayForGermination type="text" description=" Cumulative degrees-day needed for seed germination (oCd):">45</DegreesDayForGermination>
        <Dummy3 type="category" description="Generic parameters for initialising the sward, by species type" />
        <initialDMFractions_grass type="text" description=" Fractions of initial dmshoot for each biomass pool, for grasses:">0.15  0.25  0.25  0.05  0.05  0.10  0.10  0.05  0.00  0.00  0.00</initialDMFractions_grass>
      </AgPasture>
      <outputfile name="Results_Species">
        <filename output="yes">Ryegrass AgPastureClassic Results_Species.out</filename>
        <title>Ryegrass AgPastureClassic Results_Species</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>Species_name(1) as Ryegrass.Name</variable>
          <variable>Crop_type as Ryegrass.CropType</variable>
          <variable>SpeciesTotalWt(1) as Ryegrass.TotalWt</variable>
          <variable>SpeciesAboveGroundWt(1) as Ryegrass.AboveGroundWt</variable>
          <variable>SpeciesBelowGroundWt(1) as Ryegrass.BelowGroundWt</variable>
          <variable>SpeciesStandingWt(1) as Ryegrass.StandingWt</variable>
          <variable>SpeciesStandingLiveWt(1) as Ryegrass.StandingLiveWt</variable>
          <variable>SpeciesStandingDeadWt(1) as Ryegrass.StandingDeadWt</variable>
          <variable>SpeciesLeafWt(1) as Ryegrass.LeafWt</variable>
          <variable>SpeciesStemWt(1) as Ryegrass.StemWt</variable>
          <variable>SpeciesStolonWt(1) as Ryegrass.StolonWt</variable>
          <variable>SpeciesRootWt(1) as Ryegrass.RootWt</variable>
          <variable>SpeciesLeafStage1Wt(1) as Ryegrass.LeafStage1Wt</variable>
          <variable>SpeciesLeafStage2Wt(1) as Ryegrass.LeafStage2Wt</variable>
          <variable>SpeciesLeafStage3Wt(1) as Ryegrass.LeafStage3Wt</variable>
          <variable>SpeciesLeafStage4Wt(1) as Ryegrass.LeafStage4Wt</variable>
          <variable>SpeciesStemStage1Wt(1) as Ryegrass.StemStage1Wt</variable>
          <variable>SpeciesStemStage2Wt(1) as Ryegrass.StemStage2Wt</variable>
          <variable>SpeciesStemStage3Wt(1) as Ryegrass.StemStage3Wt</variable>
          <variable>SpeciesStemStage4Wt(1) as Ryegrass.StemStage4Wt</variable>
          <variable>SpeciesStolonStage1Wt(1) as Ryegrass.StolonStage1Wt</variable>
          <variable>SpeciesStolonStage2Wt(1) as Ryegrass.StolonStage2Wt</variable>
          <variable>SpeciesStolonStage3Wt(1) as Ryegrass.StolonStage3Wt</variable>
          <variable>SpeciesPotCarbonAssimilation(1) as Ryegrass.PotCarbonAssimilation</variable>
          <variable>SpeciesCarbonLossRespiration(1) as Ryegrass.CarbonLossRespiration</variable>
          <variable>SpeciesPotGrowthGross(1) as Ryegrass.GrossPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthNet(1) as Ryegrass.NetPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthNoNLimit(1) as Ryegrass.PotGrowthWt_Wstress</variable>
          <variable>SpeciesGrowthWt(1) as Ryegrass.ActualGrowthWt</variable>
          <variable>SpeciesNetGrowthWt(1) as Ryegrass.EffectiveGrowthWt</variable>
          <variable>SpeciesHerbageGrowth(1) as Ryegrass.HerbageGrowthWt</variable>
          <variable>speciesFShoot(1) as Ryegrass.ShootDMAllocation</variable>
          <variable>SpeciesLitterWt(1) as Ryegrass.LitterWt</variable>
          <variable>SpeciesRootSenescedWt(1) as Ryegrass.RootSenescedWt</variable>
          <variable>SpeciesTotalN(1) as Ryegrass.TotalN</variable>
          <variable>SpeciesStandingN(1) as Ryegrass.StandingN</variable>
          <variable>SpeciesLeafN(1) as Ryegrass.LeafN</variable>
          <variable>SpeciesStemN(1) as Ryegrass.StemN</variable>
          <variable>SpeciesStolonN(1) as Ryegrass.StolonN</variable>
          <variable>SpeciesRootN(1) as Ryegrass.RootN</variable>
          <variable>SpeciesLeafStage1N(1) as Ryegrass.LeafStage1N</variable>
          <variable>SpeciesLeafStage2N(1) as Ryegrass.LeafStage2N</variable>
          <variable>SpeciesLeafStage3N(1) as Ryegrass.LeafStage3N</variable>
          <variable>SpeciesLeafStage4N(1) as Ryegrass.LeafStage4N</variable>
          <variable>SpeciesStemStage1N(1) as Ryegrass.StemStage1N</variable>
          <variable>SpeciesStemStage2N(1) as Ryegrass.StemStage2N</variable>
          <variable>SpeciesStemStage3N(1) as Ryegrass.StemStage3N</variable>
          <variable>SpeciesStemStage4N(1) as Ryegrass.StemStage4N</variable>
          <variable>SpeciesStolonStage1N(1) as Ryegrass.StolonStage1N</variable>
          <variable>SpeciesStolonStage2N(1) as Ryegrass.StolonStage2N</variable>
          <variable>SpeciesStolonStage3N(1) as Ryegrass.StolonStage3N</variable>
          <variable>SpeciesLeafNConc(1) as Ryegrass.LeafNConc</variable>
          <variable>SpeciesStemNConc(1) as Ryegrass.StemNConc</variable>
          <variable>SpeciesStolonNConc(1) as Ryegrass.StolonNConc</variable>
          <variable>SpeciesRootNConc(1) as Ryegrass.RootNConc</variable>
          <variable>SpeciesSenescedNRemobilisable(1) as Ryegrass.RemobilisableSenescedN</variable>
          <variable>SpeciesSenescedNRemobilised(1) as Ryegrass.RemobilisedSenescedN</variable>
          <variable>SpeciesRemobilisableNLuxury(1) as Ryegrass.RemobilisableLuxuryN</variable>
          <variable>SpeciesLuxuryNRemobilised(1) as Ryegrass.RemobilisedLuxuryN</variable>
          <variable>SpeciesFixedN(1) as Ryegrass.FixedN</variable>
          <variable>SpeciesRequiredNLuxury(1) as Ryegrass.RequiredLuxuryN</variable>
          <variable>SpeciesRequiredNOptimum(1) as Ryegrass.RequiredOptimumN</variable>
          <variable>SpeciesDemandN(1) as Ryegrass.DemandSoilN</variable>
          <variable>SpeciesSupplyN(1) as Ryegrass.AvailableSoilN</variable>
          <variable>SpeciesUptakeN(1) as Ryegrass.UptakeN</variable>
          <variable>SpeciesLitterN(1) as Ryegrass.LitterN</variable>
          <variable>SpeciesRootSenescedN(1) as Ryegrass.SenescedRootN</variable>
          <variable>SpeciesGrowthN(1) as Ryegrass.ActualGrowthN</variable>
          <variable>SpeciesGrowthNconc(1) as Ryegrass.ActualGrowthNConc</variable>
          <variable>SpeciesWaterDemand(1) as Ryegrass.WaterDemand</variable>
          <variable>SpeciesWaterSupply(1) as Ryegrass.WaterAvailable</variable>
          <variable>SpeciesWaterUptake(1) as Ryegrass.WaterUptake</variable>
          <variable>SpeciesLiveDMTurnoverRate(1) as Ryegrass.LiveDMTurnoverRate</variable>
          <variable>SpeciesDeadDMTurnoverRate(1) as Ryegrass.DeadDMTurnoverRate</variable>
          <variable>SpeciesStolonDMTurnoverRate(1) as Ryegrass.StolonDMTurnoverRate</variable>
          <variable>SpeciesRootDMTurnoverRate(1) as Ryegrass.RootDMTurnoverRate</variable>
          <variable>SpeciesTotalLAI(1) as Ryegrass.TotalLAI</variable>
          <variable>SpeciesGreenLAI(1) as Ryegrass.GreenLAI</variable>
          <variable>SpeciesDeadLAI(1) as Ryegrass.DeadLAI</variable>
          <variable>speciesHeight(1) as Ryegrass.Height</variable>
          <variable>speciesRootDepth(1) as Ryegrass.RootDepth</variable>
          <variable>SpeciesRadnFactor(1) as Ryegrass.GlfRadnIntercept</variable>
          <variable>SpeciesCO2Factor(1) as Ryegrass.GlfCO2</variable>
          <variable>SpeciesNconcFactor(1) as Ryegrass.GlfNConcentration</variable>
          <variable>SpeciesGLFT(1) as Ryegrass.GlfTemperature</variable>
          <variable>SpeciesHighTstress(1) as Ryegrass.GlfHeat</variable>
          <variable>SpeciesLowTstress(1) as Ryegrass.GlfCold</variable>
          <variable>SpeciesGLFA(1)  as Ryegrass.GlfWaterLogging</variable>
          <variable>SpeciesGLFW(1) as Ryegrass.GlfWater</variable>
          <variable>SpeciesGLFN(1) as Ryegrass.GlfN</variable>
          <variable>SpeciesIrradianceTopCanopy(1) as Ryegrass.IrradianceTopCanopy</variable>
          <variable>SpeciesHarvestableWt(1) as Ryegrass.HarvestableWt</variable>
          <variable>SpeciesHarvestWt(1) as Ryegrass.HarvestedWt</variable>
          <variable>SpeciesHarvestPct(1) as Ryegrass.HarvestedFraction</variable>
          <variable>SpeciesHarvestN(1) as Ryegrass.HarvestedN</variable>
          <variable>SpeciesHerbageDigestibility(1) as Ryegrass.HerbageDigestibility</variable>
          <variable>SpeciesDefoliatedDigestibility(1) as Ryegrass.HarvestedDigestibility</variable>
          <variable>SpeciesTempFactor</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>Ryegrass.HerbageDigestibility</Y>
            <Y>Ryegrass.HarvestedDigestibility</Y>
            <Y>SpeciesHerbageDigestibility1</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <outputfile name="Results_Layers">
        <filename output="yes">Ryegrass AgPastureClassic Results_Layers.out</filename>
        <title>Ryegrass AgPastureClassic Results_Layers</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>dlayer as Soil.Thickness</variable>
          <variable>RootWtFraction as Ryegrass.RootWtFraction</variable>
          <variable>rlv as Ryegrass.RLD</variable>
          <variable>NitrogenSupplyLayers as Ryegrass.NitrogenAvailable</variable>
          <variable>NitrogenUptakeLayers as Ryegrass.NitrogenUptake</variable>
          <variable>WaterSupplyLayers as Ryegrass.SoilAvailableWater</variable>
          <variable>WaterUptakeLayers as Ryegrass.WaterUptake</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
      </outputfile>
      <outputfile name="Results_MassBalance">
        <filename output="yes">Ryegrass AgPastureClassic Results_MassBalance.out</filename>
        <title>Ryegrass AgPastureClassic Results_MassBalance</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>TotalPlantN as TotalPlantN</variable>
          <variable>urea() as TotalUrea</variable>
          <variable>nh4() as TotalNH4</variable>
          <variable>no3() as TotalNO3</variable>
          <variable>hum_n() as TotalHumusN</variable>
          <variable>biom_n() as TotalBiomN</variable>
          <variable>fom_N() as TotalFomN</variable>
          <variable>surfaceom_n as SurfaceOMN</variable>
          <variable>fertiliser as FertiliserN</variable>
          <variable>PlantFixedN as FixedN</variable>
          <variable>HarvestN as HarvestN</variable>
          <variable>dnit() as DenitrifiedN</variable>
          <variable>leach_no3 as LeachedN</variable>
          <variable>NitrogenUptake as UptakeN</variable>
          <variable>PlantRemobilisedN as NitrogenRemobilisedSenescence</variable>
          <variable>PlantLuxuryNRemobilised as NitrogenRemobilisedLuxury</variable>
          <variable>PlantGrowthN as ActualGrowthN</variable>
          <variable>LitterDepositionN as LitterDepositionN</variable>
          <variable>RootSenescenceN as RootSenescenceN</variable>
          <variable>sw_dep() as TotalSoilWater</variable>
          <variable>rain as Rain</variable>
          <variable>irrigation as Irrigation</variable>
          <variable>runoff as Runoff</variable>
          <variable>drain as Drainage</variable>
          <variable>es as Evaporation</variable>
          <variable>WaterUptake as WaterUptake</variable>
          <variable>StandingPlantWt as Pasture.StandingWt</variable>
          <variable>PreHarvestDM as PreHarvestDM</variable>
          <variable>PostHarvestDM as PostHarvestDM</variable>
          <variable>harvested_dm as DefoliatedWt</variable>
          <variable>harvested_dm as HarvestedWt</variable>
          <variable>removed_dm as RemovedWt</variable>
          <variable>returned_dm as ReturnedWt</variable>
          <variable>harvested_n as DefoliatedN</variable>
          <variable>harvested_n as HarvestedN</variable>
          <variable>removed_n as RemovedN</variable>
          <variable>NReturnedInDung as NReturnedInDung</variable>
          <variable>NReturnedInUrine as NReturnedInUrine</variable>
          <variable>DaysAfterCut as DaysAfterCut</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
            <CheckedTitles> HerbageDigestibility</CheckedTitles>
            <CheckedTitles> DefoliatedDigestibility</CheckedTitles>
            <CheckedTitles> SwardDefoliatedDigestibility</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>DefoliatedDigestibility</Y>
            <Y>SwardDefoliatedDigestibility</Y>
            <Y>SpeciesDeadDigestibility</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <GraphReport name="Plant">
        <Graph name="PlantWt">
          <Legend>
            <CheckedTitles> Ryegrass.TotalWt</CheckedTitles>
            <CheckedTitles> Ryegrass.AboveGroundWt</CheckedTitles>
            <CheckedTitles> Ryegrass.BelowGroundWt</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalWt</Y>
            <Y>Ryegrass.AboveGroundWt</Y>
            <Y>Ryegrass.BelowGroundWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantN">
          <Legend>
            <CheckedTitles> Ryegrass.TotalN</CheckedTitles>
            <CheckedTitles> Ryegrass.LeafN</CheckedTitles>
            <CheckedTitles> Ryegrass.StemN</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalN</Y>
            <Y>Ryegrass.LeafN</Y>
            <Y>Ryegrass.StemN</Y>
            <Y>Ryegrass.RootN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="StandingWt">
          <Legend>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.StandingLiveWt</Y>
            <Y>Ryegrass.StandingDeadWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="LAI">
          <Legend>
            <CheckedTitles> Ryegrass.TotalLAI</CheckedTitles>
            <CheckedTitles> Ryegrass.GreenLAI</CheckedTitles>
            <CheckedTitles> Ryegrass.DeadLAI</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalLAI</Y>
            <Y>Ryegrass.GreenLAI</Y>
            <Y>Ryegrass.DeadLAI</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Harvest">
        <Graph name="PlantDM">
          <Legend>
            <CheckedTitles> Pasture.StandingWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Pasture.StandingWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PreHarvestDM, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PreHarvestDM, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PostHarvestDM, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PostHarvestDM, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Pasture.StandingWt</Y>
            <Y>PreHarvestDM</Y>
            <Y>PostHarvestDM</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMHarvestable">
          <Legend>
            <CheckedTitles> Ryegrass.HarvestableWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestableWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageDigestibility, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageDigestibility, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HarvestableWt</Y>
            <Y>Ryegrass.HarvestedWt</Y>
            <YRight>Ryegrass.HerbageDigestibility</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMYield">
          <Legend>
            <CheckedTitles> Ryegrass.HarvestedWt</CheckedTitles>
            <CheckedTitles> Cumulative Ryegrass.HarvestedWt</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HarvestedWt</Y>
            <YRight>Cumulative Ryegrass.HarvestedWt</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Harvest">
          <Legend>
            <CheckedTitles> Cumulative HarvestedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative HarvestedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative RemovedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative RemovedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative ReturnedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative ReturnedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <YRight>Cumulative HarvestedWt</YRight>
            <YRight>Cumulative RemovedWt</YRight>
            <YRight>Cumulative ReturnedWt</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Digestibility">
          <Legend>
            <CheckedTitles> Ryegrass.HerbageDigestibility</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedDigestibility</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HerbageDigestibility</Y>
            <Y>Ryegrass.HarvestedDigestibility</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Growth">
        <Graph name="Potential">
          <Legend>
            <CheckedTitles> Ryegrass.GrossPotentialGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.GrossPotentialGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.NetPotentialGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.NetPotentialGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GrossPotentialGrowthWt</Y>
            <Y>Ryegrass.NetPotentialGrowthWt</Y>
            <Y>Ryegrass.PotGrowthWt_Wstress</Y>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Actual">
          <Legend>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.PotGrowthWt_Wstress</Y>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <Y>Ryegrass.EffectiveGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Herbage">
          <Legend>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <Y>Ryegrass.EffectiveGrowthWt</Y>
            <Y>Ryegrass.HerbageGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Allocation">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.ShootDMAllocation</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="GLFs">
        <Graph name="GLFTdamage">
          <Legend>
            <CheckedTitles>Plot,  Ryegrass.GlfCold</CheckedTitles>
            <CheckedTitles>Plot1,  Ryegrass.GlfHeat</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfCold</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
          <Plot name="Plot1">
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfHeat</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFNcon">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfNConcentration</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFW">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfWater</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFN">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFTemp">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfTemperature</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Radn">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.IrradianceTopCanopy</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="NBalance">
        <Graph name="MineralN">
          <Legend>
            <CheckedTitles> TotalNO3, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNO3, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNH4, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNH4, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalNO3</Y>
            <Y>TotalNH4</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="OrganicN">
          <Legend>
            <CheckedTitles> TotalBiomN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalBiomN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalFomN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalFomN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SurfaceOMN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SurfaceOMN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalHumusN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalHumusN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalBiomN</Y>
            <Y>TotalFomN</Y>
            <Y>SurfaceOMN</Y>
            <YRight>TotalHumusN</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Uptake">
        <Graph name="PlantWater">
          <Legend>
            <CheckedTitles> Ryegrass.WaterDemand, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterDemand, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterUptake, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterUptake, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.WaterDemand</Y>
            <Y>Ryegrass.WaterUptake</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantNUptake">
          <Legend>
            <CheckedTitles> Ryegrass.UptakeN, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.UptakeN, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.FixedN, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.FixedN, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RequiredLuxuryN</Y>
            <Y>Ryegrass.RequiredOptimumN</Y>
            <Y>Ryegrass.DemandSoilN</Y>
            <Y>Ryegrass.UptakeN</Y>
            <Y>Ryegrass.FixedN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Remobilisation">
          <Legend>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableSenescedN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableSenescedN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableLuxuryN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableLuxuryN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedSenescedN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedSenescedN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedLuxuryN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedLuxuryN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot name="Plot1">
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RemobilisableSenescedN</Y>
            <Y>Ryegrass.RemobilisableLuxuryN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
          <Plot name="Plot2">
            <SeriesType>Dash line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RemobilisedSenescedN</Y>
            <Y>Ryegrass.RemobilisedLuxuryN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="WBalance">
        <Graph name="SWC">
          <Legend>
            <CheckedTitles> OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalSoilWater</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="InOuts">
          <Legend>
            <CheckedTitles> Cumulative Rain</CheckedTitles>
            <CheckedTitles> Cumulative Irrigation</CheckedTitles>
            <CheckedTitles> Cumulative Runoff</CheckedTitles>
            <CheckedTitles> Cumulative Drainage</CheckedTitles>
            <CheckedTitles> Cumulative Evaporation</CheckedTitles>
            <CheckedTitles> Cumulative WaterUptake</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <YRight>Cumulative Rain</YRight>
            <YRight>Cumulative Irrigation</YRight>
            <YRight>Cumulative Runoff</YRight>
            <YRight>Cumulative Drainage</YRight>
            <YRight>Cumulative Evaporation</YRight>
            <YRight>Cumulative WaterUptake</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
    </area>
    <Graph name="PlantWt">
      <Legend>
        <CheckedTitles> Ryegrass.AboveGroundWt, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.AboveGroundWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.BelowGroundWt, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.BelowGroundWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.TotalWt</Y>
        <Y>Ryegrass.AboveGroundWt</Y>
        <Y>Ryegrass.BelowGroundWt</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="DMYield">
      <Legend>
        <CheckedTitles> Cumulative Ryegrass.HarvestedWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
        <CheckedTitles> Cumulative Ryegrass.HarvestedWt, {Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.HarvestedWt</Y>
        <YRight>Cumulative Ryegrass.HarvestedWt</YRight>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="GLFW">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.GlfWater</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="GLFN">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.GlfN</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="Digestibility">
      <Legend>
        <CheckedTitles> Ryegrass.HerbageDigestibility, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HerbageDigestibility, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HarvestedDigestibility, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HarvestedDigestibility, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.HerbageDigestibility</Y>
        <Y>Ryegrass.HarvestedDigestibility</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="Allocation">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.ShootDMAllocation</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="PotGrowth">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <YRight>Cumulative Ryegrass.GrossPotentialGrowthWt</YRight>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="PotGrowth1">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.Height</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
  </simulation>
  <simulation name="Ryegrass1">
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">01/07/2000</start_date>
      <end_date type="date" description="Enter the end date of the simulation">30/06/2002</end_date>
    </clock>
    <metfile name="met">
      <filename name="filename" input="yes">C:\apsim_dev\Data\MetFiles\VCS\VCS_Ruakura.met</filename>
    </metfile>
    <summaryfile />
    <area name="AgPastureClassic">
      <folder name="Managers">
        <manager2 name="HarvestingAgPasture">
          <ui>
            <Dummy1 type="category" description="Setting up a harvesting rotation for AgPasture" />
            <CutPasture_StartDate type="ddmmmdate" description=" Enter the date to start the rotation (dd/mm/yyyy):">01/01/1900</CutPasture_StartDate>
            <CutPasture_EndDate type="ddmmmdate" description=" Enter the date to end the rotation (dd/mm/yyyy):">31/12/2100</CutPasture_EndDate>
            <Dummy2 type="category" description="Parameters defining the interval and amount to harvest" />
            <CutTriggerType type="list" listvalues="Fixed interval,Target interval,Target standing biomass" description=" Choose the trigger type, defines when harvests can occur:">Fixed interval</CutTriggerType>
            <Intervals2Cut type="text" description="   If trigger is interval between harvests, enter its value (days):">21</Intervals2Cut>
            <UpperThresholds type="text" description="   If trigger is the sward standing biomass, enter the amount (kgDM/ha):">2800</UpperThresholds>
            <RemoveAmountType type="list" listvalues="Set amount,Target amount,Given amounts down to residual DM,All herbage down to residual DM" description=" Choose how the amount to harvest will be defined:">All herbage down to residual DM</RemoveAmountType>
            <Amounts2Cut type="text" description="   If setting an amount, enter the value to harvest at each cut (kgDM/ha):">185</Amounts2Cut>
            <MinimumFraction type="text" description="      For target amount, enter the fraction of the target below which harvest is ignored (0-1):">0.33</MinimumFraction>
            <LowerThresholds type="text" description="   Enter the minimum residual standing biomass after cut (kgDM/ha):">1500</LowerThresholds>
            <Dummy3 type="category" description="Management of harvested material" />
            <ResidueTreatmentType type="list" listvalues="Return as residue,Return as dung &amp; urine" description=" Choose the treatment type for the harvested material:">Return as residue</ResidueTreatmentType>
            <DMRemovalOption type="list" listvalues="Based on herbage digestibility,type a fraction (0-1)" description=" Enter fraction of DM that is removed from the field (0-1):">1.0</DMRemovalOption>
            <FracN2Remove type="text" description=" Enter fraction of N that is removed from the field (0-1):">1.0</FracN2Remove>
            <Dummy4 type="category" description="   If returning residues as dung &amp; urine" />
            <UrineDepth type="text" description="    Enter the depth down to which urine will apllied (mm):">300</UrineDepth>
            <NinDungChoice type="list" listvalues="Set the proportion returned,Define the C:N ratio" description="    Choose how the N content in dung is defined:">Set the proportion returned</NinDungChoice>
            <FracN2Dung type="text" description="      If setting the proportion of N returned in dung, enter the value (0-1):">0.4</FracN2Dung>
            <CNratioDung type="text" description="      If defining the C:N ratio of dung, enter the value (approx. 10 to 20):">0.0</CNratioDung>
          </ui>
          <text>using System;
using ModelFramework;

//This manager sets up a cut/grazing rotation for AgPasture. It also handles the return of harvested material.
// The rotation is valid between two given dates only, these don't need to be bounded to the simulation dates (start date is set to simulation start date, if prior to it).
// Harvest is done on above ground standing DM, i.e. leaves plus stem/sheath (dead and green).
// Whether harvest can happen or not is evaluated in the first day (always), and thereof evaluations follow a trigger, varying for rotation types.
// + Cut trigger types:
//  - Fixed interval:
//     Cut is allowed at given days only (set by start rotation date and then at regular intervals);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is only allowed on the date selected, 'Can_Cut' is set to "no" at the end of the day;
//  - Target interval:
//     Cut is allowed from given days (begins at start rotation date and at regular intervals after last cut);
//     Cut happens if amount to remove is set and/or if existing DM is greater than ResidualDM;
//     Cut is allow from the date selected until something is harvested, only then 'Can_Cut' is set to "no";
//  - Target standing biomass:
//     Cut is allowed when existing DM reaches the target value;
//     Cut always happens, unless UpperThreshold is bellow the LowerThreshold (i.e. residual DM);
//     Cut is allowed until something is harvested (according to remove options), 'Can_Cut' is then set to "no";
//
// + Remove amount options:
//  - Set amount: The amount to remove is fixed, if this amount is not available, no cut is performed
//  - Target amount: The amount is the smallest of the given target value and difference between existing DM and the LowerThreshold (Residual DM);
//   » To avoid harvest of very small amounts a minimum fraction of the target value can be defined. If the existing amount is below that fraction the harvest is ignored.
//  - Given amounts down to residual DM: Amount to remove in a given day is given (which is limited to the difference to the minimum residual DM). However, harvest only stops
//    when standing DM reaches the LowerThreshold.  The minimum fraction to remove is also applied here to avoid very small amounts;
//  - All herbage down to residual DM: Amount to remove is the difference between existing DM and minimum residual DM (LowerThreshold);
//
// + Residue management options:
//  - Return as residue: A fraction of the DM harvested (plus the N on it) is added as grass residue to the surfaceOM module;
//  - Return as dung &amp; urine: A fraction of the amount harvested is returned to the soil as evenly distributed urine (urea) and dung;
//     This is a very simplified approach where the fractions of DM (i.e. carbon) and N to be removed are set separately. 
//     The fraction of dry matter (or carbon) to be removed can be set (0-1) or allowed to be calculated based on herbage digestibility.
//     The partition of N between urine and dung is set by the user by defining how N in dung is computed.
//     The DM and N to be returned as dung are added to surfaceOM 'RuminantDung_PastureFed'.
//     N urine is added as urea fertiliser, distributed from surface down to  a given depth. The proportion per layer decreases linearly with depth.
//  + Defining the N content in dung:
//    - Set proportion returned: A fraction of N not removed from the field is returned in the dung. The proportion returned as dung should be given.
//    - Define the C:N ratio: The C:N ratio for dung can be defined. Note that this option may alter the amount returned as urine (to ensure mass balance).

// » The values for few parameters can be entered as an array, these are interpreted as defining the rotation within a year, so the first value is assumed to be for 01/Jan,
//    the last value is for 31/Dec, and the values in between are spread evenly over the year. The value of the parameter for each day of the year is calculated 
//    dynamically by linear interpolation.  The parameters that can be set up as arrays are:
//    - Interval between harvests (Interval2Cut)
//    - The DM amount to trigger a harvest (UpperThreshold)
//    - The amount to remove on each harvest (Amount2Cut)
//    - The residual DM after harvest (LowerThreshold)

//--&gt;  Last uptaded in: 01/Oct/2015 ..................

public class Script
{
   //Parameter variables:
   [Param] private DateTime CutPasture_StartDate;  //Date to start the cutting rotation
   [Param] private DateTime CutPasture_EndDate;    //Date to end cutting rotation

   [Param] private string CutTriggerType;          //The cut trigger type (Fixed interval,Target interval,Target standing biomass)
   [Param] private double[] Intervals2Cut;         //The interval between cuts, used if cut trigger type is by interval (days), (values will be interpolated using DoY)
   [Param] private double[] UpperThresholds;       //The standing biomass amount to trigger a cut, if cut type is target biomass (kg/ha, standing DM [leaf+stem/sheath]), (values will be interpolated using DoY)

   [Param] private string RemoveAmountType;        //The way to compute how much pasture is cut (Set amount,Target amount,Given amounts down to residual DM, All herbage down to residual DM)
   [Param] private double[] Amounts2Cut;           //The amount of DM to be removed at each cut, limited to residual DM (LowerThreshold) (kg/ha, DM above ground), (values will be interpolated using DoY)
   [Param] private double MinimumFraction;         //The minimum fraction of harvest amount that is meaningful, below which harvest is ignored (for target amount)
   [Param] private double[] LowerThresholds;       //The minimum residual DM amount left after cut (kg/ha, DM above ground), (values will be interpolated using DoY)

   [Param] private string ResidueTreatmentType;    //The treatment to the material cut (Return as residue,Return as dung &amp; urine)
   [Param] private string DMRemovalOption;         //The option to define DM to remove (Based on herbage digestibility,type a fraction (0-1))
   [Param] private double FracN2Remove;            //Fraction of the N in the material cut that is removed from simulation (0-1)
   
   [Param] private double UrineDepth;              //The depth down to which urine will be applied (mm), proportion applied per layer decrease with depth
   [Param] private string NinDungChoice;           //The way N in dung is defined (Set proportion returned,Set CN ratio)
   [Param] private double FracN2Dung;              //The fraction of returned N that goes into dung, if return is as dung &amp; urine (0-1)
   [Param] private double CNratioDung;             //The C:N ratio of dung, if return is as dung and urine (~10-20)

   //Links and events:
   [Link] private Component MySelf;
   [Link] private AgPasture MyAgPasture;
   [Link] private Fertiliser MyFertiliser;
   [Link] private SurfaceOM MySurfaceOM;
   
   //Variables read from other modules
   [Input] private DateTime Today;     //Today's date
   [Input] private double[] dlayer;    //Today's day of year

   //Outputs
   [Output][Units("")] public string Can_Cut;                  //Whether today is a harvesting day
   [Output][Units("")] public string Has_Cut;                  //Whether today's harvest was done
   [Output][Units("kg/ha")] public double harvested_dm;        //Pasture DM harvested today (kg/ha)
   [Output][Units("kgN/ha")] public double harvested_n;        //N harvested today
   [Output][Units("kg/ha")] public double removed_dm;          //DM removed from the paddock
   [Output][Units("kgN/ha")] public double removed_n;          //N removed from the paddock
   [Output][Units("kgN/ha")] public double returned_dm;        //DM returned to the paddock
   [Output][Units("kgN/ha")] public double returned_n;         //N returned to the paddock
   [Output][Units("kgN/ha")] public double NReturnedInDung;    //N returned as dung (SurfaceOM)
   [Output][Units("kgN/ha")] public double NReturnedInUrine;   //N returned as urine (urea)
   [Output][Units("kg/ha/day")] public double GrowthRateCalc;  //Average growth rate for this cut
   [Output][Units("days")] public int DaysAfterCut;            //Number of days after last harvest
   [Output][Units("kg/ha")] public double PreHarvestDM;        //Total standing DM (Leaf + Stem/Sheath) before cut
   [Output][Units("kg/ha")] public double PostHarvestDM;       //Total standing DM (Leaf + Stem/Sheath) after cut
   [Output][Units("kg/ha")] public double ResidualDM;          //Today's residual DM
   [Output][Units("kg/ha")] public double TriggerDM;           //Today's trigger DM
   [Output][Units("kg/ha")] public double HarvestAmount;       //Today's DM amount to harvest
   [Output][Units("days")] public int CutInterval;             //Todays cut interval

   //Internal variables
   private double FracDM2Remove;       //The fraction of DM to be removed from the simulation (0-1)   
   private bool CutIsAllowed;          //Whether cutting are allowed
   private int[] LowerThresholdDays;   //The DoY for each value of lower threshold
   private int[] UpperThresholdDays;   //The DoY for each value of upper threshold
   private int[] Amount2HarvestDays;   //The DoY for each amount to cut given
   private int[] CutIntervalDays;      //The DoY for each given cut interval
   private double[] FracLayer;         //The fraction of urine to be applied in each layer

   [EventHandler()]
   public void OnInitialised()
   {
      //Set the arrays with days
      LowerThresholdDays = setDays(LowerThresholds.Length);
      UpperThresholdDays = setDays(UpperThresholds.Length);
      Amount2HarvestDays = setDays(Amounts2Cut.Length);
      CutIntervalDays = setDays(Intervals2Cut.Length);
      
      //Reset variables
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      DaysAfterCut = CutInterval - 1;
      CutIsAllowed = false;
      Can_Cut = "no";
      Has_Cut = "no";

      //The fraction of DM to remove
      // - DMRemovalOption can be a value (0-1 = FracDM2Remove) or a string, which tell us that FracDM2Remove is based on digestibility
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      else
      {
         try
         {
            FracDM2Remove = Convert.ToDouble(DMRemovalOption);
            if ((FracDM2Remove &lt; 0.0) || (FracDM2Remove &gt; 1.0))
            {
               throw new Exception("Fraction of DM to remove is out of bounds");
            }
         } 
         catch 
         {
            throw new Exception("Fraction of DM to remove is not valid");
         }
      }
      
      //The fraction of N to remove
      if ((FracN2Remove &lt; 0.0) || (FracN2Remove &gt; 1.0))
      {
         throw new Exception("Fraction of N to remove is out of bounds");
      }
      
      //How to return residues (DM and N)
      if (ResidueTreatmentType.Contains("urine")) 
      {
         if (NinDungChoice.Contains("proportion")) 
         {
            if ((FracN2Dung &lt; 0.0) || (FracN2Dung &gt; 1.0))
            {
               throw new Exception("Proportion of N to return as dung is out of bounds");
            }
         } 
         else if (NinDungChoice.Contains("CN ratio")) 
         {
            if ((CNratioDung &lt; 0.0) || (CNratioDung &gt; 50.0))
            {
               throw new Exception("C:N ratio of dung is out of bounds");
            }
         } 
         else
         {
            throw new Exception("Choice for setting N content in dung is not valid");
         }
      }

      //compute the fraction of urine to be aplied per layer
      if (ResidueTreatmentType.Contains("urine"))
      {
         FracLayer = new double[dlayer.Length];
         double DepthFromSurface = 0.0;
         double dltZ = 0.0;
         for (int z = 0; z &lt; dlayer.Length;z++)
         {
            if(DepthFromSurface &lt; UrineDepth)
            {
               dltZ = Math.Min(dlayer[z], UrineDepth - DepthFromSurface);
               FracLayer[z] = 2 * dltZ * (1 - ((DepthFromSurface + 0.5 * dltZ) / UrineDepth)) / UrineDepth;
            }
            DepthFromSurface += dlayer[z];
         }
      }
      //Check whether choices are allowed and prepare messages     
      string myMessage1;
      string myMessage2 = "     remove ";
      switch (CutTriggerType.ToLower())
      {
         case "fixed interval":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            } 
            else
            {
               myMessage2 += RemoveAmountType.ToLower() + " (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut only every " + CutInterval.ToString() + " days";
            break;
         case "target interval":
            if (RemoveAmountType.ToLower().Contains("amount"))
            {               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else

               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut every " + CutInterval.ToString() + " days, or when possible";
            break;
         case "target standing biomass":
            if (RemoveAmountType.ToLower().Contains("amount")) 
            {
               if (RemoveAmountType.ToLower().Contains("residual")) 
               {
                  myMessage2 += RemoveAmountType.ToLower() + " (amount = " + HarvestAmount.ToString("#0") + " kg/ha/day, residual DM = " + ResidualDM.ToString("#0") + " kg/ha)";
               }
               else
               {
                  myMessage2 += RemoveAmountType.ToLower() + " = " + HarvestAmount.ToString("#0") + " kg/ha";
               }
            }
            else 
            {
               myMessage2 += RemoveAmountType.ToLower() + " = (" + ResidualDM + " kg/ha)";
            }
            myMessage1 = ", cut when DM reaches " + TriggerDM + " kgDM/ha";
            break;
         default:
            throw new Exception("Cut trigger type is not valid");
      }

      //write messages on summary file
      Console.WriteLine("");
      Console.WriteLine("   Harvesting rotation for AgPasture initialised");
      Console.WriteLine("     rotation rule valid between " + CutPasture_StartDate.ToString("dd/MM/yyyy") + " and " + CutPasture_EndDate.ToString("dd/MM/yyyy"));
      Console.WriteLine("     rotation type: " + CutTriggerType.ToLower() + myMessage1);
      Console.WriteLine(myMessage2);
      if (DMRemovalOption.Contains("digestibility"))
      {
         myMessage1 = DMRemovalOption.ToLower();
      }
      else
      {
         myMessage1 = ((1.0 - FracDM2Remove) * 100).ToString("#0.0") + "%";
      }
      Console.WriteLine("     fraction of harvested DM to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      myMessage1 = ((1.0 - FracN2Remove) * 100).ToString("#0.0") + "%";
      if (FracN2Remove &lt; 0.999999)
      {
         myMessage1 += " (" + ((1.0 - FracN2Dung) * 100).ToString("#0.0") + "% of it as urine)";
      }
      Console.WriteLine("     fraction of harvested N to " + ResidueTreatmentType.ToLower() + ": " + myMessage1);
      if (ResidueTreatmentType.Contains("urine"))
      {
         Console.WriteLine("     proportion of urine N to be added in each layer:");
         myMessage1 = FracLayer[0].ToString("0.000");
         for (int z = 1;z &lt; dlayer.Length;z++)
         {
            myMessage1 += ", " + FracLayer[z].ToString("0.000");
         }
         Console.WriteLine("      " + myMessage1);
      }
      Console.WriteLine("");
   }

   [EventHandler()]
   public void OnPrepare()
   {
      double Amount2Harvest;
      double AmountHarvestable;
      double ExistingDM;

      //Reset variables:
      Has_Cut = "no";
      harvested_dm = 0.0;
      harvested_n = 0.0;
      removed_dm = 0.0;
      removed_n = 0.0;
      returned_dm = 0.0;
      returned_n = 0.0;
      GrowthRateCalc = 0.0;
      NReturnedInDung = 0.0;
      NReturnedInUrine = 0.0;
      DaysAfterCut = DaysAfterCut + 1;
      CutInterval = (int) InterpolateVals(Today.DayOfYear, CutIntervalDays, Intervals2Cut);
      ResidualDM = InterpolateVals(Today.DayOfYear, LowerThresholdDays, LowerThresholds);
      TriggerDM = InterpolateVals(Today.DayOfYear, UpperThresholdDays, UpperThresholds);
      HarvestAmount = InterpolateVals(Today.DayOfYear, Amount2HarvestDays, Amounts2Cut);
      ExistingDM = MyAgPasture.StandingPlantWt;

      //Decide whether cut is allowed:
      if ((Today.Date &gt;= CutPasture_StartDate.Date) &amp;&amp; (Today.Date &lt;= CutPasture_EndDate.Date))
      {
         switch (CutTriggerType.ToLower())
         {
            case "fixed interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset in the end of the day
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               else
               {
                  CutIsAllowed = false;
                  //always reset CutIsAllowed
               }
               break;
            case "target interval":
               //Allways send an CutIsAllowed if interval is right, it will be reset only if cut actually happens (depends on amount type)
               if (DaysAfterCut &gt;= CutInterval)
               {
                  CutIsAllowed = true;
               }
               break;
            case "target standing biomass":
               //Send an CutIsAllowed if existing DM amount is above the target (TriggerDM/UpperThreshold), it will be reset if cut actually happens
               if (ExistingDM &gt;= TriggerDM)
               {
                  CutIsAllowed = true;
               }
               break;
         }

         //The use of these avoid (or at least reduces) problems when two managers are used in the same simulation
         if (CutIsAllowed)
         {
            Can_Cut = "yes";
         }
         else
         {
            Can_Cut = "no";
         }
         
         //Decide how much to cut:
         if (CutIsAllowed)
         {
            PreHarvestDM = MyAgPasture.StandingPlantWt;

            switch (RemoveAmountType.ToLower())
            {
               case "set amount":
                  Amount2Harvest = HarvestAmount;
                  if (CutTriggerType.ToLower() == "fixed interval")
                  {
                     AmountHarvestable = PreHarvestDM;
                  }
                  else
                  {
                     AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  }
                  break;
               case "target amount":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "given amounts down to residual dm":
                  Amount2Harvest = Math.Min(Math.Max(MinimumFraction * HarvestAmount, PreHarvestDM - ResidualDM), HarvestAmount);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               case "all herbage down to residual dm":
                  Amount2Harvest = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  AmountHarvestable = Math.Max(0.0, PreHarvestDM - ResidualDM);
                  break;
               default:
                  throw new Exception("Option to compute DM amount to harvest is not valid");
            }

            //Decide whether cut actually happens:
            if ((AmountHarvestable &gt;= Amount2Harvest))
            {
               CutPasture(Amount2Harvest);
               HandleResidues();
               //reset cut variables
               DaysAfterCut = 0;
               Has_Cut = "yes";
               GrowthRateCalc = harvested_dm / DaysAfterCut;
               PostHarvestDM = MyAgPasture.StandingPlantWt;
               if (RemoveAmountType.Contains("amount"))
               { // check whether reamining amount is significant
                  if (Math.Abs(PostHarvestDM - ResidualDM) &lt; MinimumFraction * HarvestAmount)
                  {  
                     CutIsAllowed = false;
                  }
               }
               else
               {
                  CutIsAllowed = false;
               }
            }
         }
         else
         {
            Amount2Harvest = 0.0;
            AmountHarvestable = 0.0;
         }
      }
   }


   private void CutPasture(double Amount2Harvest)
   {
      // -- Cutting pasture ----------------------------------------------------------------------------

      GrazeType CutData = new GrazeType();
      CutData.sender = MySelf.Name;
      CutData.amount = (float) Amount2Harvest;
      CutData.type = "SetRemoveAmount";
      MyAgPasture.Graze(CutData);
      harvested_dm = MyAgPasture.HarvestWt;
      harvested_n = MyAgPasture.HarvestN;

      //Let user know (via summary) that a cut was made
      Console.WriteLine(Today.ToString("dd MMMM yyyy") + " (Day of year=" + Today.DayOfYear.ToString() + "), " + MySelf.Name + ":");
      Console.WriteLine("     Removing " + harvested_dm.ToString("#0") + "kg DM/ha, with " + harvested_n.ToString("#0.0") + "kg N/ha");
   }

   
   private void HandleResidues()
   {
      // -- Residue management -------------------------------------------------------------------------
      
      if (DMRemovalOption.Contains("digestibility"))
      {
         FracDM2Remove = MyAgPasture.DefoliatedDigestibility;
      }
      removed_dm = harvested_dm * FracDM2Remove;
      removed_n = harvested_n * FracN2Remove;
      returned_dm = harvested_dm - removed_dm;
      returned_n = harvested_n - removed_n;

      if (returned_dm &lt; 0.0)
      {
         throw new Exception("Return_DM value is negative");
      }
      if (returned_n &lt; 0.0)
      {
         throw new Exception("Return_N value is negative");
      }

      if (ResidueTreatmentType.ToLower() == "return as residue")
      {
         if (FracDM2Remove &lt; 1.0)
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "grass";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) returned_n };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
      }
      else if (ResidueTreatmentType.ToLower() == "return as dung &amp; urine")
      {
         // It is advised that dung and urine return should be done using another manager or modules, such as 'UrinePatch' 

         if (NinDungChoice.Contains("proportion"))
         {
            NReturnedInDung = returned_n * FracN2Dung;
         }
         else if (NinDungChoice.Contains("CN ratio"))
         {
            NReturnedInDung = returned_dm / CNratioDung;
         }
         NReturnedInUrine = Math.Max(0.0, returned_n - NReturnedInDung);

         if (NReturnedInDung &gt; returned_n)
         {
            throw new Exception("Amount of N to return as dung is larger than total return, check proportion or CN ratio");
         }

         if ((returned_dm &gt; 0.0) || (NReturnedInDung &gt; 0.0))
         {
            BiomassRemovedType SOMData = new BiomassRemovedType();
            SOMData.crop_type = "RuminantDung_PastureFed";
            SOMData.dm_type = new string[] { SOMData.crop_type };
            SOMData.dlt_crop_dm = new float[] { (float) returned_dm };
            SOMData.dlt_dm_n = new float[] { (float) NReturnedInDung };
            SOMData.fraction_to_residue = new float[] { 1.0F };
            MySurfaceOM.BiomassRemoved(SOMData);            
         }
         
         if (NReturnedInUrine &gt; 0.0)
         {
            FertiliserApplicationType UrineData = new FertiliserApplicationType();
            UrineData.Amount = (float) NReturnedInUrine;
            UrineData.Depth = 10;   // mm
            UrineData.Type = "urea_n";
            MyFertiliser.Apply(UrineData);
         }
      }
      else
      {
         throw new Exception("Residue management type is not valid");
      }
   }

   private int[] setDays(int NumDates)
   {
      //Define the day of year for each value on am array, given the arra's length - first value, day=1; last value day = 365; dates in between spread evenly (rounded)
      int[] xArray;
      if (NumDates &lt; 366)
      {
         xArray = new int[NumDates];
         xArray[0] = 1;
         if (NumDates &gt; 1)
         {
            xArray[NumDates - 1] = 365;
            if (NumDates &gt; 2)
            {
               for (int i = 1; i &lt; NumDates - 1; i++)
               {
                  xArray[i] = 365 * i / (NumDates);
               }
            }
         }
      }
      else
      {
         throw new Exception("Number of items on CoverTarget greater than maximum allowed (365)");
      }
      
      return xArray;
   }

   private double InterpolateVals(int my_x, int[] xArray, double[] yArray)
   {
      //Find out the value correspondig to my_x in the function described by the x and y arrays
      double my_y = 0.0;
      int iN = xArray.Length - 1;
      if (my_x &lt;= xArray[0])
      {
         //values below x[0] are set to y[0]
         my_y = yArray[0];
      }
      else if (my_x &gt;= xArray[iN])
      {
         //value above x(n) are set to y(n)
         my_y = yArray[iN];
      }
      else
      {
         //find the nearest neighbours and interpolate (linear)
         for (int i = 1; i &lt;= iN; i++)
         {
            if (my_x &lt;= xArray[i])
            {
               my_y = yArray[i - 1] + ((my_x - xArray[i - 1]) * (yArray[i] - yArray[i - 1]) / (xArray[i] - xArray[i - 1]));
               i = xArray.Length;
            }
         }
      }
      
      return my_y;
   }
}
</text>
        </manager2>
        <manager2 name="FertOnSoilNCriteria">
          <ui>
            <category type="category" description="Fertiliser application based on Soil N amount" />
            <FertAllowed type="yesno" description="Turn ferliser applications on?">yes</FertAllowed>
            <FertDepth2SoilN type="text" description="Depth to calculate available soil N (mm):">500</FertDepth2SoilN>
            <FertCriticalSoilN type="text" description="Minimum available N, triggers an application (kgN/ha):">5</FertCriticalSoilN>
            <FertNAmount type="text" description="Amount of N fertiliser for each application (kgN/ha):">25</FertNAmount>
            <FertType type="list" listvalues="no3_n,nh4_n,nh4no3,urea_n,urea_no3,urea,nh4so4_n,rock_p,banded_p,broadcast_p" description="Type of N fertiliser to apply:">urea_n</FertType>
            <FertApplicationDepth type="text" description="Depth at which to apply the fertiliser (mm):">1</FertApplicationDepth>
            <FertMinimumDays type="text" description="Minimum period between applications (days):">15</FertMinimumDays>
          </ui>
          <text>Imports System
Imports ModelFramework

Public Class Script 
   &lt;Link()&gt; Dim MyPaddock As Paddock
   &lt;Link()&gt; Dim Fert As Fertiliser

   'Parameters - user inputs from the Properties tab
   &lt;Param&gt; Private FertAllowed As String           'Whether fertilisation is allowed at all
   &lt;Param&gt; Private FertDepth2SoilN As Double       'Depth in the soil to calculate the N storage
   &lt;Param&gt; Private FertCriticalSoilN As Double     'Minimum soil N, below which fertiliser application is triggered
   &lt;Param&gt; Private FertNAmount As Double           'Amount of N fertiliser per application
   &lt;Param&gt; Private FertType As String              'Type of fertiliser to apply
   &lt;Param&gt; Private FertApplicationDepth As Double  'Depth in the soil that the fertilser will be applied
   &lt;Param&gt; Private FertMinimumDays As Double       'Minimum interval between appplications

   'Inputs - got by this Manager from elsewhere in APSIM
   &lt;Input&gt; Private Today As DateTime            'Today's date from APSIM 
   &lt;Input&gt; Private dlayer As Double()           'Array of soil layer thicknesses - for calculation of mineral N in the soil
   &lt;Input&gt; Private no3 As Double()              'Array of nitrate-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil
   &lt;Input&gt; Private nh4 As Double()              'Array of ammonium-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil
   &lt;Input&gt; Private urea As Double()             'Array of urea-N (kg N /ha) for each soil layer - for calculation of mineral N in the soil

   'Outputs - calculated by this Manager and available to be output by the user
   &lt;Output&gt; Private TopMineralN As Double       'Mineral-N stored in the soil to a depth of FertDepth2SoilN

   'Other variables that are calculated but not needed for outputs
   Private LayerWeights As Double()             'Weigthing of each layer for FertCriticalSoilN calculation
   Private lastApplicationDate As DateTime
   Private fertiliserIsAllowed As Boolean
   Private nLayers As Integer
   Private daysSinceLastApplication As Double

   &lt;EventHandler()&gt; Public Sub OnInit2()
      '"OnInit2" is an event handler gets called once at the start of the simulation 

      fertiliserIsAllowed = (FertAllowed.ToLower = "yes")
      nLayers = dLayer.Length

   End Sub

   &lt;EventHandler()&gt; Public Sub OnPrepare()
      '"OnPrepare" is an event handler gets called once at the start of every day (before Prepare and Post) 

      daysSinceLastApplication = (Today - lastApplicationDate).TotalDays

      ' get the N stored in the soil
      Dim depthFromSurface As Double = 0.0
      Dim fracLayer As Double = 0.0
      TopMineralN = 0.0
      For layer As Integer = 0 To nLayers
         fracLayer = Math.Min(1.0, (FertDepth2SoilN - depthFromSurface) / dlayer(layer))
         TopMineralN += (NO3(layer) + NH4(layer) + Urea(layer)) * fracLayer
         depthFromSurface += dlayer(layer)
         If (depthFromSurface &gt;= FertDepth2SoilN)
            layer = nLayers
         End If
      Next

      ' Check whether a fertiliser application is due
      If (fertiliserIsAllowed And daysSinceLastApplication &gt;= FertMinimumDays And TopMineralN &lt;= FertCriticalSoilN) Then
         Fert.Apply(FertNAmount, FertApplicationDepth, FertType)
         lastApplicationDate = Today
      End If

   End Sub

End Class
   </text>
        </manager2>
        <manager2 name="CentrePivotIrrigation">
          <ui>
            <Dummy type="category" description="Centre Pivot Irrigation Manager" />
            <AllowIrrigation type="yesno" description=" Turn irrigation on?">no</AllowIrrigation>
            <Dummy type="category" description="General irrigation parameters" />
            <Irrigation_start_date type="ddmmmdate" description=" Start of irrigation season (dd-mmm):">15-Sep</Irrigation_start_date>
            <Irrigation_end_date type="ddmmmdate" description=" End of irrigation season (dd-mmm):">30-May</Irrigation_end_date>
            <DepthToCalcPAW type="text" description=" Enter the soil depth to which water deficit is computed (mm):">300</DepthToCalcPAW>
            <CritRainToPause type="text" description=" Critical rainfall - amount over 3 days after which irrigation is paused (mm):">30</CritRainToPause>
            <DaysToPauseOnCritRain type="text" description=" Number of days irrigation is paused once critical rainfall is reached (days):">3</DaysToPauseOnCritRain>
            <IrrigSetup type="list" listvalues="specify,calculate" description=" Select whether irrigation setup is specified or calculated internally">specify</IrrigSetup>
            <category type="category" description="Irrigation setup (if not to calculate)" />
            <IrrigTrigger type="text" description=" Soil water deficit at which irrigation starts (mm):">30</IrrigTrigger>
            <IrrigUpperThreshold type="text" description=" Soil water deficit at which irrigation stops, daily amount is added regardless (mm):">0</IrrigUpperThreshold>
            <IrrigAmount type="text" description=" Amount of irrigation to apply (mm/day):">6</IrrigAmount>
            <IrrigDuration type="text" description=" Duration of each irrigation event (min):">1440</IrrigDuration>
            <IrrigReturn type="text" description=" Irrigation return period (days):">1</IrrigReturn>
            <IrrigEfficiency type="text" description=" Irrigation efficiency (%):">100</IrrigEfficiency>
          </ui>
          <text>Imports System
Imports ModelFramework

'This manager applies irrigation following rules mimicking a centre-pivot management.
' Irrigation parameters can be given or be left to be calculated by the module (based on the soil PAW)

'--&gt;  Last uptaded in: 15/Nov/2014 ..................


Public Class Script 
   
   'Parameter variables:
   &lt;param&gt; Private AllowIrrigation As String                   'Indicates whether irrigation is on (yes) or off (no)
   &lt;param&gt; Private Irrigation_start_date As String             'Start of the irrigation season (dd-mmm)
   &lt;param&gt; Private Irrigation_end_date As String               'End of the irrigation season (dd-mmm)
   &lt;param&gt; Private DepthToCalcPAW As Double                    'Depth to consider plant available water, and deficit (mm)
   &lt;param&gt; Private CritRainToPause As Double                   'Value of rain (sum over 3 days) when irrigation is paused (mm)
   &lt;param&gt; Private DaysToPauseOnCritRain As Double             'Number of days irrigations is paused when CritRain is reached
   &lt;param&gt; Private IrrigSetup As String                        'Define wheter the irrgation parameters are define by user of calculated
   &lt;param&gt; Private IrrigTrigger As Double                      'User defined irrigation trigger (mm)
   &lt;param&gt; Private IrrigUpperThreshold As Double               'User defined water deficit at which irrigation stops, daily amount is added regardless (mm):
   &lt;param&gt; Private IrrigAmount As Double                       'User defined irrigation amount (mm)
   &lt;param&gt; Private IrrigDuration As Double                     'User defined duration of irrigation (minutes)
   &lt;param&gt; Private IrrigReturn As Double                       'User defined irrigation return period (days)
   &lt;param&gt; Private IrrigEfficiency As Double                   'User defined irrigation efficiency (%)

   'Link to other modules:
   &lt;Link&gt; Private Irrigator As Irrigation   
   
   'Variables read from other modules
   &lt;Input&gt; Private today As DateTime                           'Today's date
   &lt;Input&gt; Private dlayer As Double()                          'Thickness of soil layers (mm)
   &lt;Input&gt; Private rain As Double                              'Rainfall (mm)
   &lt;Input&gt; Private sw_dep As Double()                          'Soil water content (mm)
   &lt;Input&gt; Private dul_dep As Double()                         'Soil water content at DUL (mm)
   &lt;Input&gt; Private ll15_dep As Double()                        'Soil water content at LL15 (mm)

   'Output variables
   &lt;Output&gt;&lt;Units("mm")&gt; Public SoilWaterDeficit As Double          'Soil water deficit (mm)
   &lt;Output&gt;&lt;Units("days")&gt; Public DaysAfterIrrigation As Double     'The number of days after irrigation was applied
   &lt;Output&gt;&lt;Units("mm")&gt; Public SoilPAWforIrrigation As Double      'The soil plant available water (mm)
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationTrigger As Double         'The soil water deficit that triggers irrigation (mm)
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationUpperThreshold As Double  'The soil water deficit for stopping irrigation (mm)
   &lt;Output&gt;&lt;Units("days")&gt; Public IrrigationReturnPeriod As Integer 'The return period for irrigation
   &lt;Output&gt;&lt;Units("mm")&gt; Public IrrigationAmount As Double          'The amount of water to add in an irrigation event (mm/day)
   &lt;Output&gt;&lt;Units("min")&gt; Public IrrigationDuration As Double       'The duration of each irrigation event (min/day)
   &lt;Output&gt;&lt;Units("%")&gt; Public IrrigationEfficiency As Double       'The irrigaton efficiency (%)
   &lt;Output&gt;&lt;Units("mm")&gt; Public RainOnPrevious3Days As Double       'The amount of rainfall over the previous 3 days
   &lt;Output&gt;&lt;Units("days")&gt; Public Days2Pause As Double              'The number of days that irrigation is paused due to large rainfall

   'Internal variables
   Private StartDate As Date                                   'The date when irrigation start (in date format)
   Private EndDate As Date                                     'The date when irrigation finish (in date format)
   Private RainOnPreviousDays(2) As Double                     'Record the rain of the previous 3 days (mm)
   Private IrrigationRequired As Boolean
      
   &lt;EventHandler()&gt; Public Sub OnInitialised()

      'check the presence of the irrigation module and one of the soil modules
      Call CheckModules()
      
      'Put the dates into date format:
      StartDate = Date.Parse(Irrigation_start_date)
      EndDate = Date.Parse(Irrigation_end_date)

      DaysAfterIrrigation = IrrigationReturnPeriod
      IrrigationRequired = False
      
      'Zero rain on previous 3 days
      RainOnPrevious3Days = 0.0
      Array.Clear(RainOnPreviousDays, 0, RainOnPreviousDays.Length)

      'Calculate soil PAW for irrigation
      Dim DepthFromSurface As Double = 0
      SoilPAWforIrrigation = 0.0
      For z As Integer = 0 To dlayer.length - 1
         If DepthFromSurface &lt; DepthToCalcPAW Then
            Dim FractionLayer As Double = math.Min(1, math.Max(0, DepthToCalcPAW - DepthFromSurface) / dlayer(z))
            '  if depth does not coincide with the end of the layer, only a corresponding fraction of it is used
            SoilPAWforIrrigation += (dul_dep(z) - ll15_dep(z)) * FractionLayer
         Else
            z = dlayer.Length - 1
         End If
         DepthFromSurface += dlayer(z)
         'DepthFromSurface = DepthFromSurface + dlayer(z)
      Next
      
      Dim IrrigParamType As String
      If IrrigSetup.ToLower = "specify" Then
         'Irrgation parameters are given by the user (no check is made on their values)
         IrrigParamType = "specified by user"
         IrrigationTrigger = IrrigTrigger
         IrrigationUpperThreshold = IrrigUpperThreshold
         IrrigationAmount = IrrigAmount
         IrrigationDuration = IrrigDuration
         IrrigationReturnPeriod = IrrigReturn
         IrrigationEfficiency = IrrigEfficiency
      Else 'IrrigSetup = "calculate"
         'Determine the irrigation parameters based on soil PAW and equipment type
         IrrigParamType = "calculated by manager"
         '  Assumptions:  -capacity to supply water is not limiting (pump and pipes are well dimensioned)
         '                -irrigation ideally starts when soil available water is half of PAW, but trigger is limited to between 10 and 40mm
         '                -amount of irrigation applied aim to fill up to 90% of PAW, but is limited between 10 and 30mm/day
         '                -rotation of the pivot is function of a fixed irrigation rate (7.5mm/day)
         '                -duration is function ofthe rotation period and nozzle size (5m = wetted span, equals ~1.5 degress at a radius of 200m)
         '                -the efficiency is function of PAW, set a minimum of 70% and a maximum of 90%, and the rate of change (slope) is 0.15.
         IrrigationTrigger = Math.Min(40.0, Math.Max(10.0, SoilPAWforIrrigation / 2.0))
         IrrigationAmount = Math.Max(10.0, Math.Min(30.0, 0.9 * SoilPAWforIrrigation - IrrigationTrigger))
         IrrigationUpperThreshold = Math.Max(1.0, SoilPAWforIrrigation - IrrigationAmount)
         IrrigationReturnPeriod = Math.Round(IrrigationAmount / 7.5)
         IrrigationDuration = IrrigationReturnPeriod * 1440 * (1.5 / 360)
         IrrigationEfficiency = Math.Min(90.0, 70.0 + 0.15 * SoilPAWforIrrigation)
      End If

      Console.WriteLine("")
      If AllowIrrigation.ToLower = "yes" Then
         Console.WriteLine("   Irrigation by centre-pivot is enabled")
         Console.WriteLine("     Parameters have been " &amp; IrrigParamType &amp; ":")
         Console.WriteLine("     - Irrigation season between " &amp; StartDate.ToString("dd MMMM") &amp; " and " &amp; EndDate.ToString("dd MMMM"))
         Console.WriteLine("     - Soil layer depth for calculating irrigation is " &amp; DepthToCalcPAW.ToString("0.0") &amp; " mm")
         Console.WriteLine("        With plant available water of " &amp; SoilPAWforIrrigation.ToString("0.0") &amp; " mm")
         Console.WriteLine("     - Amount applied per irrigation event: " &amp; IrrigationAmount.ToString("#0") &amp; " mm")
         Console.WriteLine("     - Duration of each irrigation event: " &amp; IrrigationDuration.ToString("#0") &amp; " min")
         Console.WriteLine("     - Soil water deficit to trigger irrigation: " &amp; IrrigationTrigger.ToString("#0") &amp; " mm")
         Console.WriteLine("     - Return period for irrigation system: " &amp; IrrigationReturnPeriod.ToString("#0") &amp; " days")
         Console.WriteLine("     - Efficiency of the irrigation system: " &amp; IrrigationEfficiency.ToString("0.0") &amp; " %")

      Else
         Console.WriteLine("   Irrigation by centre-pivot is disabled")
      End If
      Console.WriteLine("")

   End Sub

   
   &lt;EventHandler()&gt; Public Sub OnPrepare()
      
      'Calc the soil water deficit     
      Dim DepthFromSurface As Integer = 0
      SoilWaterDeficit = 0.0         
      For z As Integer = 0 To dlayer.length - 1
         If DepthFromSurface &lt; DepthToCalcPAW Then
            Dim FractionLayer As Double = math.Min(1, math.Max(0, DepthToCalcPAW - DepthFromSurface) / dlayer(z))
            '  if depth does not coincide with the end of the layer, only a corresponding fraction of it is used
            SoilWaterDeficit += Math.Max(0, math.Min(dul_dep(z) - ll15_dep(z), dul_dep(z) - sw_dep(z))) * FractionLayer
         Else
            z = dlayer.Length - 1
         End If
         DepthFromSurface += dlayer(z)
      Next
      SoilWaterDeficit = -SoilWaterDeficit
      
      'Decide whether to irrigate
      If AllowIrrigation.ToLower = "yes" Then
         'Calc the amount of rain today plus the previous two days
         RainOnPreviousDays(2) = RainOnPreviousDays(1)
         RainOnPreviousDays(1) = RainOnPreviousDays(0)
         RainOnPreviousDays(0) = rain
         RainOnPrevious3Days = RainOnPreviousDays(0) + RainOnPreviousDays(1) + RainOnPreviousDays(2)
            
         DaysAfterIrrigation = DaysAfterIrrigation + 1

         If isBetween(today, StartDate, EndDate) Then   'We are at the irrigation season     

            'Calc the number of days to pause irrigation after large rainfal events
            If RainOnPrevious3Days &gt;= CritRainToPause Then
               Days2Pause = DaysToPauseOnCritRain
            Else
               Days2Pause = math.Max(0, Days2Pause - 1)
            End If

            'Check whether irrigation is paused
            If Days2Pause &lt; 0.5 Then
               'Irrigation is not paused, check return period
               If DaysAfterIrrigation &gt; IrrigationReturnPeriod Then    'Irrigation is allowed
                  'Check whether soil needs irrigation
                  If SoilWaterDeficit &lt;= -IrrigationTrigger Then
                     IrrigationRequired = True
                  Else If SoilWaterDeficit &gt; -IrrigationUpperThreshold Then
                     IrrigationRequired = False
                  End If

                  If IrrigationRequired Then
                     Dim MyIrrigation As IrrigationApplicationType = New IrrigationApplicationType
                     MyIrrigation.Amount = IrrigationAmount / (IrrigationEfficiency * 0.01)
                     MyIrrigation.time = ""
                     MyIrrigation.Duration = 0
                     MyIrrigation.source = New String() {}
                     MyIrrigation.Crop_Area = 0
                     MyIrrigation.NH4 = 0
                     MyIrrigation.NO3 = 0
                     MyIrrigation.CL = 0
                     Irrigator.Variable("irrigation_efficiency").Set(IrrigationEfficiency * 0.01)
                     Irrigator.Apply(MyIrrigation)
                     DaysAfterIrrigation = 1
                     Console.WriteLine(Today.ToString("dd MMMM yyyy") + " (Day of year=" + Today.DayOfYear.ToString + "), Irrigation:")
                     Console.WriteLine("  Centre-pivot is applying irrigation. Amount = " &amp; MyIrrigation.Amount.ToString("0.0") &amp; " mm")
                  End If
               End If
            End If
         End If
      End If
         
   End Sub

   
   Private Function isBetween(ByVal today As Date, ByVal startdate As Date, ByVal enddate As Date) As Boolean
      
      'Check whether today is between the start and the end dates.  This is needed because start and end dates don't have year
      
      Dim date1 As Date = New Date(today.Year, startdate.Month, startdate.Day)
      Dim date2 As Date = New Date(today.Year, enddate.Month, enddate.Day)

      If (date1 &gt; date2) Then
         'Irrigation in the middle of the year - ex: summer in the northern hemisphere
         Return (today &gt;= date1 Or today &lt;= date2)
      Else
         'Irrigation in the end of the year - ex: summer in the southern hemisphere
         Return (today &gt;= date1 And today &lt;= date2)
      End If
      
   End Function


   Private Sub CheckModules()
   
      If Irrigator Is Nothing Then
         Throw New Exception("Centre pivot manager requires the presense of the irrigation module in the paddock")
      End If
      
   End Sub
   
End Class
</text>
        </manager2>
      </folder>
      <micromet name="Micromet">
        <soilalbedo type="text" description="soilalbedo">0.23</soilalbedo>
        <a_interception type="text" description="a_interception">0</a_interception>
        <b_interception type="text" description="b_interception">0</b_interception>
        <c_interception type="text" description="c_interception">0</c_interception>
        <d_interception type="text" description="d_interception">0</d_interception>
      </micromet>
      <irrigation name="Irrigation">
        <automatic_irrigation type="list" listvalues="on,off" description="Automatic irrigation">off</automatic_irrigation>
        <asw_depth type="text" description="Depth to which ASW is calculated. (mm)">600</asw_depth>
        <crit_fr_asw type="text" description="Fraction of ASW below which irrigation is applied (0-1.0)">0.5</crit_fr_asw>
        <irrigation_efficiency type="text" description="Efficiency of the irrigation. (0-1.0)">1</irrigation_efficiency>
        <irrigation_allocation type="list" listvalues="on,off" description="Allocation limits">off</irrigation_allocation>
        <allocation type="text" description="Allocation in mm">0</allocation>
        <default_no3_conc type="text" description="Nitrate concentration (ppm N)">0</default_no3_conc>
        <default_nh4_conc type="text" description="Ammonium concentration (ppm N)">0</default_nh4_conc>
        <default_cl_conc type="text" description="Chloride concentration (ppm Cl)">0</default_cl_conc>
      </irrigation>
      <fertiliser name="Fertiliser" />
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">AgPasture</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">grass</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">40</cnr>
        <cpr type="text" description="C:P ratio of initial residue (optional)" />
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <Soil name="SoilLismore">
        <RecordNumber>0</RecordNumber>
        <SoilType>NZ_Sedimentary</SoilType>
        <LocalName>Lismore</LocalName>
        <Site>Winchmore</Site>
        <NearestTown>Ashburton</NearestTown>
        <Region>Canterbury</Region>
        <Country>New Zealand</Country>
        <NaturalVegetation>0</NaturalVegetation>
        <ApsoilNumber>0</ApsoilNumber>
        <Latitude>-48.48</Latitude>
        <Longitude>0</Longitude>
        <LocationAccuracy>0</LocationAccuracy>
        <YearOfSampling>0</YearOfSampling>
        <DataSource>published soil profile description (as an example)</DataSource>
        <Analysis>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>10</double>
            <double>40</double>
            <double>60</double>
            <double>70</double>
            <double>70</double>
          </Rocks>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <PH>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
            <double>6</double>
          </PH>
          <CEC>
            <double>12.5</double>
            <double>10</double>
            <double>9</double>
            <double>5</double>
            <double>4</double>
            <double>4</double>
            <double>4</double>
          </CEC>
          <ParticleSizeSand>
            <double>15</double>
            <double>20</double>
            <double>25</double>
            <double>35</double>
            <double>40</double>
            <double>40</double>
            <double>40</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>65</double>
            <double>65</double>
            <double>63</double>
            <double>57</double>
            <double>54</double>
            <double>55</double>
            <double>55</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>20</double>
            <double>15</double>
            <double>12</double>
            <double>8</double>
            <double>6</double>
            <double>5</double>
            <double>5</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Water>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.35</double>
            <double>1</double>
            <double>0.53</double>
            <double>0.31</double>
            <double>0.3</double>
            <double>0.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.12</double>
            <double>0.06</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </AirDry>
          <LL15>
            <double>0.15</double>
            <double>0.14</double>
            <double>0.06</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </LL15>
          <DUL>
            <double>0.36</double>
            <double>0.34</double>
            <double>0.19</double>
            <double>0.07</double>
            <double>0.04</double>
            <double>0.03</double>
            <double>0.03</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.43</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.11</double>
            <double>0.11</double>
            <double>0.11</double>
          </SAT>
          <KS>
            <double>5000</double>
            <double>2500</double>
            <double>3000</double>
            <double>10000</double>
            <double>17500</double>
            <double>20000</double>
            <double>20000</double>
          </KS>
          <SoilCrop name="agpasture">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="ryegrass">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="clover">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="slurp">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.02</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.06</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="agpastureLIFY">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>2</WinterCona>
          <WinterU>2</WinterU>
          <WinterDate>1-apr</WinterDate>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.5</double>
            <double>0.52</double>
            <double>0.55</double>
            <double>0.6</double>
            <double>0.65</double>
            <double>0.65</double>
            <double>0.65</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>3</double>
            <double>1</double>
            <double>0.6</double>
            <double>0.4</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.83</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.99</double>
            <double>0.99</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <InitialWater name="Initial water">
          <FractionFull>0.95</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>EvenlyDistributed</PercentMethod>
          <RelativeTo>ll15</RelativeTo>
        </InitialWater>
        <Sample name="Initial nitrogen">
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>5</double>
            <double>2.5</double>
            <double>1</double>
            <double>0.8</double>
            <double>0.5</double>
            <double>0.5</double>
            <double>0.5</double>
          </NO3>
          <NH4>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <AgPasture name="Ryegrass">
        <Dummy1 type="category" description="Initial values for each species to be simulated" />
        <speciesToSimulate type="text" description="  Name of the species to be simulated:">Ryegrass</speciesToSimulate>
        <iniShootDM type="text" description="  Initial above ground dry matter weight (kgDM/ha):">2000</iniShootDM>
        <iniRootDM type="text" description="  Initial root dry matter weight (kgDM/ha):">500</iniRootDM>
        <iniRootDepth type="text" description="  Initial rooting depth (mm):">750</iniRootDepth>
        <WaterUptakeSource type="list" listvalues="calc,apsim" description="  Water uptake done by AgPasture (calc) or by apsim?:">calc</WaterUptakeSource>
        <Dummy2 type="category" description="Detailed parameters for each species (overwrites the xml file)" />
        <speciesName type="text" description=" Name of each parameterised species:">ryegrass</speciesName>
        <micrometType type="text" description=" Plant type for MicroMet/SWIM:">grass</micrometType>
        <photoPath type="text" description=" Photosynthesis pathway (C3=3, C4=4):">3</photoPath>
        <isLegume type="yesno" description=" Is this a legume species? (no=0, yes=1):">0</isLegume>
        <Pm type="text" description=" Reference photosynthesis rate - CO2 assimilation (mg CO2/m2.s):">1</Pm>
        <alphaPhoto type="text" description=" Leaf gross photosynthesis rate (mg CO2/J):">0.01</alphaPhoto>
        <thetaPhoto type="text" description=" Photosynthesis curve parameter (J/kg.s):">0.8</thetaPhoto>
        <fractionPAR type="text" description=" Fraction of radiation that is photosynthetic active (0-1):">0.5</fractionPAR>
        <lightExtCoeff type="text" description=" Light extinction coefficient (0-1):">0.5</lightExtCoeff>
        <growthTmin type="text" description=" Minimum temperature for growth (oC):">2</growthTmin>
        <growthTopt type="text" description=" Optimum temperature for growth (oC):">20</growthTopt>
        <growthTq type="text" description=" Curve parameter for growth response to temperature:">1.75</growthTq>
        <referenceCO2 type="text" description=" Reference atmospheric CO2 content for photosynthesis (ppm):">380</referenceCO2>
        <CO2PmaxScale type="text" description=" Scale factor for CO2 effect on photosynthesis (ppm):">700</CO2PmaxScale>
        <CO2NScale type="text" description=" Scale factor for CO2 effects on plant N concentration (ppm):">600</CO2NScale>
        <CO2NMin type="text" description=" Minimum reduction of plant N concentration under elevated CO2 (0-1):">0.7</CO2NMin>
        <CO2NCurvature type="text" description=" Curvature factor of CO2 effect on plant N concentration (&gt;1.0):">2</CO2NCurvature>
        <useHeatStress type="yesno" description=" Consider effects of high temperatures on photosynthesis? (yes/no):">yes</useHeatStress>
        <heatOnsetT type="text" description=" Onset temperature for heat effects on growth (oC):">28</heatOnsetT>
        <heatFullT type="text" description=" Temperature for full heat effects on growth (oC):">35</heatFullT>
        <heatSumT type="text" description=" Temperature sum for recovery from heat effects (oC):">30</heatSumT>
        <heatTq type="text" description=" Exponent for computing recovery from heat stress:">1</heatTq>
        <heatRecoverT type="text" description=" Base temperature for recovery from heat stress (oC):">25</heatRecoverT>
        <useColdStress type="yesno" description=" Consider effects of low temperatures on photosynthesis? (yes/no):">yes</useColdStress>
        <coldOnsetT type="text" description=" Onset temperature for cold effects on growth (oC):">0</coldOnsetT>
        <coldFullT type="text" description=" Temperature for full cold effects on growth (oC):">-3</coldFullT>
        <coldSumT type="text" description=" Temperature sum for recovery from cold effects (oC):">20</coldSumT>
        <coldTq type="text" description=" Exponent for computing recovery from cold stress:">1</coldTq>
        <coldRecoverT type="text" description=" Base temperature for recovery from cold effects (oC):">0</coldRecoverT>
        <growthEfficiency type="text" description=" Growth efficiency factor - photosynthesis minus growth respiration (0-1):">0.75</growthEfficiency>
        <maintRespiration type="text" description=" Maintenance respiration coefficient (%):">3</maintRespiration>
        <respTref type="text" description=" Reference temperature for maintenance respiration (oC):">28</respTref>
        <maxTeffectResp type="text" description=" Maximum effect of temperature on respiration (&gt;1.0):">1.25</maxTeffectResp>
        <MaxRootAllocation type="text" description=" Maximum biomass fraction that can be allocated to roots (0-1):">0.25</MaxRootAllocation>
        <TargetSRratio type="text" description=" Target or ideal shoot:root ratio:">4</TargetSRratio>
        <GlfEffectsOnSR type="text" description=" Coefficient controlling the maximum effect that soil GLFs have on Shoot:Root ratio (0-1):">0.5</GlfEffectsOnSR>
        <UseReproSeasonFactor type="yesno" description=" Whether DM allocation (shoot/root) should be adjusted for reproductive period (yes/no):">yes</UseReproSeasonFactor>
        <ReproSeasonReferenceLatitude type="text" description=" Reference latitude determining timing for reproductive season (degrees):">41</ReproSeasonReferenceLatitude>
        <ReproSeasonTimingCoeff type="text" description=" Coefficient controling the time to start the reproductive season as function of latitude:">0.14</ReproSeasonTimingCoeff>
        <ReproSeasonDurationCoeff type="text" description=" Coefficient controling the duration of the reproductive season as function of latitude:">2</ReproSeasonDurationCoeff>
        <ReproSeasonShouldersLengthFactor type="text" description=" Ratio between the length of shoulders and the period with full reproductive growth effect:">1</ReproSeasonShouldersLengthFactor>
        <ReproSeasonOnsetDurationFactor type="text" description=" The proportion of the length of shoulder before the period with full reproductive growth effect (0-1):">0.6</ReproSeasonOnsetDurationFactor>
        <ReproSeasonMaxAllocationIncrease type="text" description=" Maximum increase in DM allocation to shoot during reproductive growth (0-1):">0.5</ReproSeasonMaxAllocationIncrease>
        <ReproSeasonAllocationCoeff type="text" description=" Coefficient controling the increase in shoot allocation during reproductive growth as function of latitude:">0.1</ReproSeasonAllocationCoeff>
        <maxFLeaf type="text" description=" Maximum fraction of new shoot growth allocated to leaves (0-1):">0.7</maxFLeaf>
        <minFLeaf type="text" description=" Minimum fraction of new shoot growth allocated to leaves (0-1):">0.7</minFLeaf>
        <dmMaxFLeaf type="text" description=" Shoot DM for maximum leaf allocation, allocation decreases above that (kgDM/ha):">500</dmMaxFLeaf>
        <dmReferenceFLeaf type="text" description=" Reference DM, when allocation to leaves is midway max and min (kgDM/ha):">2000</dmReferenceFLeaf>
        <exponentFLeaf type="text" description=" Exponent of function describing DM allocation to leaves (&gt;0.0):">3</exponentFLeaf>
        <fStolon type="text" description=" Fraction of new shoot growth allocated to stolons (0-1):">0</fStolon>
        <liveLeavesPerTiller type="text" description=" Number of live leaves per tiller:">3</liveLeavesPerTiller>
        <SpecificLeafArea type="text" description=" Specific leaf area, per dry matter weight (m2/kgDM):">20</SpecificLeafArea>
        <SpecificRootLength type="text" description=" Specific root length, per dry matter weight (m/gDM):">75</SpecificRootLength>
        <rateLive2Dead type="text" description=" Reference tissue turnover rate for shoot (0-1):">0.05</rateLive2Dead>
        <facGrowingTissue type="text" description=" Factor for adjusting DM turnover of growing tissue (&gt;0.0):">2</facGrowingTissue>
        <refTurnoverRateStolon type="text" description=" Reference tissue turnover rate for stolon (0-1):">0</refTurnoverRateStolon>
        <rateDead2Litter type="text" description=" Reference littering rate - dead tissue to litter (0-1):">0.11</rateDead2Litter>
        <rateRootSen type="text" description=" Reference senescence rate for roots (0-1):">0.02</rateRootSen>
        <massFluxTmin type="text" description=" Minimum temperature for tissue turnover (oC):">2</massFluxTmin>
        <massFluxTopt type="text" description=" Optimum temperature for tissue turnover (oC):">20</massFluxTopt>
        <massFluxTq type="text" description=" Exponent of function for temperature effect on tissue turnover:">1</massFluxTq>
        <massFluxW0 type="text" description=" Scale factor for GLFWater effect on DM turnover (&gt;1.0):">2</massFluxW0>
        <massFluxWopt type="text" description=" Reference GLFwater for tissue turnover (0-1):">0.5</massFluxWopt>
        <massFluxDeadWq type="text" description=" Exponent to adjust GLFWater for senescing tissue (&gt;1.0):">3</massFluxDeadWq>
        <stockParameter type="text" description=" Parameter for stock influence on tissue senescence:">0.05</stockParameter>
        <Kappa2_Remob type="text" description=" Coefficient for remobilisation of luxury N from tissue2 (0-1):">0</Kappa2_Remob>
        <Kappa3_Remob type="text" description=" Coefficient for remobilisation of luxury N from tissue3 (0-1):">0</Kappa3_Remob>
        <Kappa4_Remob type="text" description=" Coefficient for partitioning non-used Nremob into tissue4 (0-1):">0</Kappa4_Remob>
        <digestLiveCellWall type="text" description=" Digestibility of live plant material (0-1):">0.6</digestLiveCellWall>
        <digestDeadCellWall type="text" description=" Digestibility of dead plant material (0-1):">0.2</digestDeadCellWall>
        <dmshoot type="text" description=" Default initial shoot dry matter weight (kgDM/ha):">1500</dmshoot>
        <dmroot type="text" description=" Default initial root dry matter weight (kgDM/ha):">450</dmroot>
        <dmgreenmin type="text" description=" Minimum allowable green dry matter weight (kgDM/ha):">300</dmgreenmin>
        <NconcOptimum_leaves type="text" description=" Optimum N concentration of young leaves (%):">4</NconcOptimum_leaves>
        <NconcMaximum_leaves type="text" description=" Maximum N concentration in leaves, with luxury uptake (%):">5</NconcMaximum_leaves>
        <NconcMinimum_leaves type="text" description=" Minimum N concentration in leaves, at senescence (%):">1.2</NconcMinimum_leaves>
        <RelativeNconc_Stems type="text" description=" Relative N concentration in stems, fraction of leaf N (0-1):">0.5</RelativeNconc_Stems>
        <RelativeNconc_Stolons type="text" description=" Relative N concentration in stolons, fraction of leaf N (0-1):">0</RelativeNconc_Stolons>
        <RelativeNconc_Roots type="text" description=" Relative N concentration in roots, fraction of leaf N (0-1):">0.5</RelativeNconc_Roots>
        <RelativeNconc_stage2 type="text" description=" Optimum N concentration for tissue2 (mature), relative to tissue1 (0-1):">1</RelativeNconc_stage2>
        <RelativeNconc_stage3 type="text" description=" Optimum N concentration for tissue3 (senescing), relative to tissue1 (0-1):">1</RelativeNconc_stage3>
        <NMinFix type="text" description=" Minimum N fixation, when soil N is sufficient (0-1):">0</NMinFix>
        <NMaxFix type="text" description=" Maximum N fixation, when no soil N is available (0-1):">0</NMaxFix>
        <NdilutCoeff type="text" description=" Coefficient for modifying the effect of N stress on plant growth (0-1):">0.5</NdilutCoeff>
        <waterStressFactor type="text" description=" coefficient for modifying the effect of water stress on plant growth (0-1):">1</waterStressFactor>
        <soilSatFactor type="text" description=" Coefficient for growth limitations due to soil moisture saturation (0-1):">0.1</soilSatFactor>
        <MinMacroPorosity type="text" description=" Minimum soil macroporosity (pores&gt;30um) for optimum plant growth (0-1):">-1</MinMacroPorosity>
        <GenericGLF type="text" description=" Generic relative growth limiting factor (0-1):">1</GenericGLF>
        <SFertilityGLF type="text" description=" Soil related generic growth limiting factor (0-1):">1</SFertilityGLF>
        <PreferenceForGreenDM type="text" description=" Weight factor defining the preference level for green DM (on removal):">1</PreferenceForGreenDM>
        <PreferenceForDeadDM type="text" description=" Weight factor defining the preference level for dead DM (on removal):">1</PreferenceForDeadDM>
        <PreferenceForLeaves type="text" description=" Weight factor defining the preference level for leaves over stems (on removal):">1</PreferenceForLeaves>
        <rootDepth type="text" description=" Default rooting depth (mm):">750</rootDepth>
        <ExpoLinearDepthParam type="text" description=" Depth from surface below which the proportion of roots starts to decrease (mm):">90</ExpoLinearDepthParam>
        <ExpoLinearCurveParam type="text" description=" Exponent to determine the distribution of root DM in the soil profile:">3.2</ExpoLinearCurveParam>
        <MinimumRootDepth type="text" description=" Root depth at germination (mm):">50</MinimumRootDepth>
        <RootElongationRate type="text" description=" Daily root elongation rate at optimum temperature (mm/day):">25</RootElongationRate>
        <MaxPlantHeight type="text" description=" Maximum average height for each species in a sward (mm):">500</MaxPlantHeight>
        <MassForMaxHeight type="text" description=" Mass above ground when maximum height is reached (kgDM/ha):">8000</MassForMaxHeight>
        <ExponentHeightFromMass type="text" description=" Exponent of function describing plant height as function of DM weight (&gt;1.0):">3</ExponentHeightFromMass>
        <MinimumHeight type="text" description=" Minimum plant height, for all species (mm):">20</MinimumHeight>
        <DegreesDayForGermination type="text" description=" Cumulative degrees-day needed for seed germination (oCd):">45</DegreesDayForGermination>
        <Dummy3 type="category" description="Generic parameters for initialising the sward, by species type" />
        <initialDMFractions_grass type="text" description=" Fractions of initial dmshoot for each biomass pool, for grasses:">0.15  0.25  0.25  0.05  0.05  0.10  0.10  0.05  0.00  0.00  0.00</initialDMFractions_grass>
      </AgPasture>
      <outputfile name="Results_Species">
        <filename output="yes">Ryegrass1 AgPastureClassic Results_Species.out</filename>
        <title>Ryegrass1 AgPastureClassic Results_Species</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>Species_name(1) as Ryegrass.Name</variable>
          <variable>Crop_type as Ryegrass.CropType</variable>
          <variable>SpeciesTotalWt(1) as Ryegrass.TotalWt</variable>
          <variable>SpeciesAboveGroundWt(1) as Ryegrass.AboveGroundWt</variable>
          <variable>SpeciesBelowGroundWt(1) as Ryegrass.BelowGroundWt</variable>
          <variable>SpeciesStandingWt(1) as Ryegrass.StandingWt</variable>
          <variable>SpeciesStandingLiveWt(1) as Ryegrass.StandingLiveWt</variable>
          <variable>SpeciesStandingDeadWt(1) as Ryegrass.StandingDeadWt</variable>
          <variable>SpeciesLeafWt(1) as Ryegrass.LeafWt</variable>
          <variable>SpeciesStemWt(1) as Ryegrass.StemWt</variable>
          <variable>SpeciesStolonWt(1) as Ryegrass.StolonWt</variable>
          <variable>SpeciesRootWt(1) as Ryegrass.RootWt</variable>
          <variable>SpeciesLeafStage1Wt(1) as Ryegrass.LeafStage1Wt</variable>
          <variable>SpeciesLeafStage2Wt(1) as Ryegrass.LeafStage2Wt</variable>
          <variable>SpeciesLeafStage3Wt(1) as Ryegrass.LeafStage3Wt</variable>
          <variable>SpeciesLeafStage4Wt(1) as Ryegrass.LeafStage4Wt</variable>
          <variable>SpeciesStemStage1Wt(1) as Ryegrass.StemStage1Wt</variable>
          <variable>SpeciesStemStage2Wt(1) as Ryegrass.StemStage2Wt</variable>
          <variable>SpeciesStemStage3Wt(1) as Ryegrass.StemStage3Wt</variable>
          <variable>SpeciesStemStage4Wt(1) as Ryegrass.StemStage4Wt</variable>
          <variable>SpeciesStolonStage1Wt(1) as Ryegrass.StolonStage1Wt</variable>
          <variable>SpeciesStolonStage2Wt(1) as Ryegrass.StolonStage2Wt</variable>
          <variable>SpeciesStolonStage3Wt(1) as Ryegrass.StolonStage3Wt</variable>
          <variable>SpeciesPotCarbonAssimilation(1) as Ryegrass.PotCarbonAssimilation</variable>
          <variable>SpeciesCarbonLossRespiration(1) as Ryegrass.CarbonLossRespiration</variable>
          <variable>SpeciesPotGrowthGross(1) as Ryegrass.GrossPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthNet(1) as Ryegrass.NetPotentialGrowthWt</variable>
          <variable>SpeciesPotGrowthNoNLimit(1) as Ryegrass.PotGrowthWt_Wstress</variable>
          <variable>SpeciesGrowthWt(1) as Ryegrass.ActualGrowthWt</variable>
          <variable>SpeciesNetGrowthWt(1) as Ryegrass.EffectiveGrowthWt</variable>
          <variable>SpeciesHerbageGrowth(1) as Ryegrass.HerbageGrowthWt</variable>
          <variable>speciesFShoot(1) as Ryegrass.ShootDMAllocation</variable>
          <variable>SpeciesLitterWt(1) as Ryegrass.LitterWt</variable>
          <variable>SpeciesRootSenescedWt(1) as Ryegrass.RootSenescedWt</variable>
          <variable>SpeciesTotalN(1) as Ryegrass.TotalN</variable>
          <variable>SpeciesStandingN(1) as Ryegrass.StandingN</variable>
          <variable>SpeciesLeafN(1) as Ryegrass.LeafN</variable>
          <variable>SpeciesStemN(1) as Ryegrass.StemN</variable>
          <variable>SpeciesStolonN(1) as Ryegrass.StolonN</variable>
          <variable>SpeciesRootN(1) as Ryegrass.RootN</variable>
          <variable>SpeciesLeafStage1N(1) as Ryegrass.LeafStage1N</variable>
          <variable>SpeciesLeafStage2N(1) as Ryegrass.LeafStage2N</variable>
          <variable>SpeciesLeafStage3N(1) as Ryegrass.LeafStage3N</variable>
          <variable>SpeciesLeafStage4N(1) as Ryegrass.LeafStage4N</variable>
          <variable>SpeciesStemStage1N(1) as Ryegrass.StemStage1N</variable>
          <variable>SpeciesStemStage2N(1) as Ryegrass.StemStage2N</variable>
          <variable>SpeciesStemStage3N(1) as Ryegrass.StemStage3N</variable>
          <variable>SpeciesStemStage4N(1) as Ryegrass.StemStage4N</variable>
          <variable>SpeciesStolonStage1N(1) as Ryegrass.StolonStage1N</variable>
          <variable>SpeciesStolonStage2N(1) as Ryegrass.StolonStage2N</variable>
          <variable>SpeciesStolonStage3N(1) as Ryegrass.StolonStage3N</variable>
          <variable>SpeciesLeafNConc(1) as Ryegrass.LeafNConc</variable>
          <variable>SpeciesStemNConc(1) as Ryegrass.StemNConc</variable>
          <variable>SpeciesStolonNConc(1) as Ryegrass.StolonNConc</variable>
          <variable>SpeciesRootNConc(1) as Ryegrass.RootNConc</variable>
          <variable>SpeciesSenescedNRemobilisable(1) as Ryegrass.RemobilisableSenescedN</variable>
          <variable>SpeciesSenescedNRemobilised(1) as Ryegrass.RemobilisedSenescedN</variable>
          <variable>SpeciesRemobilisableNLuxury(1) as Ryegrass.RemobilisableLuxuryN</variable>
          <variable>SpeciesLuxuryNRemobilised(1) as Ryegrass.RemobilisedLuxuryN</variable>
          <variable>SpeciesFixedN(1) as Ryegrass.FixedN</variable>
          <variable>SpeciesRequiredNLuxury(1) as Ryegrass.RequiredLuxuryN</variable>
          <variable>SpeciesRequiredNOptimum(1) as Ryegrass.RequiredOptimumN</variable>
          <variable>SpeciesDemandN(1) as Ryegrass.DemandSoilN</variable>
          <variable>SpeciesSupplyN(1) as Ryegrass.AvailableSoilN</variable>
          <variable>SpeciesUptakeN(1) as Ryegrass.UptakeN</variable>
          <variable>SpeciesLitterN(1) as Ryegrass.LitterN</variable>
          <variable>SpeciesRootSenescedN(1) as Ryegrass.SenescedRootN</variable>
          <variable>SpeciesGrowthN(1) as Ryegrass.ActualGrowthN</variable>
          <variable>SpeciesGrowthNconc(1) as Ryegrass.ActualGrowthNConc</variable>
          <variable>SpeciesWaterDemand(1) as Ryegrass.WaterDemand</variable>
          <variable>SpeciesWaterSupply(1) as Ryegrass.WaterAvailable</variable>
          <variable>SpeciesWaterUptake(1) as Ryegrass.WaterUptake</variable>
          <variable>SpeciesLiveDMTurnoverRate(1) as Ryegrass.LiveDMTurnoverRate</variable>
          <variable>SpeciesDeadDMTurnoverRate(1) as Ryegrass.DeadDMTurnoverRate</variable>
          <variable>SpeciesStolonDMTurnoverRate(1) as Ryegrass.StolonDMTurnoverRate</variable>
          <variable>SpeciesRootDMTurnoverRate(1) as Ryegrass.RootDMTurnoverRate</variable>
          <variable>SpeciesTotalLAI(1) as Ryegrass.TotalLAI</variable>
          <variable>SpeciesGreenLAI(1) as Ryegrass.GreenLAI</variable>
          <variable>SpeciesDeadLAI(1) as Ryegrass.DeadLAI</variable>
          <variable>speciesHeight(1) as Ryegrass.Height</variable>
          <variable>speciesRootDepth(1) as Ryegrass.RootDepth</variable>
          <variable>SpeciesRadnFactor(1) as Ryegrass.GlfRadnIntercept</variable>
          <variable>SpeciesCO2Factor(1) as Ryegrass.GlfCO2</variable>
          <variable>SpeciesNconcFactor(1) as Ryegrass.GlfNConcentration</variable>
          <variable>SpeciesGLFT(1) as Ryegrass.GlfTemperature</variable>
          <variable>SpeciesHighTstress(1) as Ryegrass.GlfHeat</variable>
          <variable>SpeciesLowTstress(1) as Ryegrass.GlfCold</variable>
          <variable>SpeciesGLFA(1)  as Ryegrass.GlfWaterLogging</variable>
          <variable>SpeciesGLFW(1) as Ryegrass.GlfWater</variable>
          <variable>SpeciesGLFN(1) as Ryegrass.GlfN</variable>
          <variable>SpeciesIrradianceTopCanopy(1) as Ryegrass.IrradianceTopCanopy</variable>
          <variable>SpeciesHarvestableWt(1) as Ryegrass.HarvestableWt</variable>
          <variable>SpeciesHarvestWt(1) as Ryegrass.HarvestedWt</variable>
          <variable>SpeciesHarvestPct(1) as Ryegrass.HarvestedFraction</variable>
          <variable>SpeciesHarvestN(1) as Ryegrass.HarvestedN</variable>
          <variable>SpeciesHerbageDigestibility(1) as Ryegrass.HerbageDigestibility</variable>
          <variable>SpeciesDefoliatedDigestibility(1) as Ryegrass.HarvestedDigestibility</variable>
          <variable>SpeciesTempFactor</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>Ryegrass.HerbageDigestibility</Y>
            <Y>Ryegrass.HarvestedDigestibility</Y>
            <Y>SpeciesHerbageDigestibility1</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <outputfile name="Results_Layers">
        <filename output="yes">Ryegrass1 AgPastureClassic Results_Layers.out</filename>
        <title>Ryegrass1 AgPastureClassic Results_Layers</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>dlayer as Soil.Thickness</variable>
          <variable>RootWtFraction as Ryegrass.RootWtFraction</variable>
          <variable>rlv as Ryegrass.RLD</variable>
          <variable>NitrogenSupplyLayers as Ryegrass.NitrogenAvailable</variable>
          <variable>NitrogenUptakeLayers as Ryegrass.NitrogenUptake</variable>
          <variable>WaterSupplyLayers as Ryegrass.SoilAvailableWater</variable>
          <variable>WaterUptakeLayers as Ryegrass.WaterUptake</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
      </outputfile>
      <outputfile name="Results_MassBalance">
        <filename output="yes">Ryegrass1 AgPastureClassic Results_MassBalance.out</filename>
        <title>Ryegrass1 AgPastureClassic Results_MassBalance</title>
        <variables name="Variables">
          <variable>dd/mmm/yyyy as Date</variable>
          <variable>Crop_name as Sward.Name</variable>
          <variable>TotalPlantN as TotalPlantN</variable>
          <variable>urea() as TotalUrea</variable>
          <variable>nh4() as TotalNH4</variable>
          <variable>no3() as TotalNO3</variable>
          <variable>hum_n() as TotalHumusN</variable>
          <variable>biom_n() as TotalBiomN</variable>
          <variable>fom_N() as TotalFomN</variable>
          <variable>surfaceom_n as SurfaceOMN</variable>
          <variable>fertiliser as FertiliserN</variable>
          <variable>PlantFixedN as FixedN</variable>
          <variable>HarvestN as HarvestN</variable>
          <variable>dnit() as DenitrifiedN</variable>
          <variable>leach_no3 as LeachedN</variable>
          <variable>NitrogenUptake as UptakeN</variable>
          <variable>PlantRemobilisedN as NitrogenRemobilisedSenescence</variable>
          <variable>PlantLuxuryNRemobilised as NitrogenRemobilisedLuxury</variable>
          <variable>PlantGrowthN as ActualGrowthN</variable>
          <variable>LitterDepositionN as LitterDepositionN</variable>
          <variable>RootSenescenceN as RootSenescenceN</variable>
          <variable>sw_dep() as TotalSoilWater</variable>
          <variable>rain as Rain</variable>
          <variable>irrigation as Irrigation</variable>
          <variable>runoff as Runoff</variable>
          <variable>drain as Drainage</variable>
          <variable>es as Evaporation</variable>
          <variable>WaterUptake as WaterUptake</variable>
          <variable>StandingPlantWt as Pasture.StandingWt</variable>
          <variable>PreHarvestDM as PreHarvestDM</variable>
          <variable>PostHarvestDM as PostHarvestDM</variable>
          <variable>harvested_dm as DefoliatedWt</variable>
          <variable>harvested_dm as HarvestedWt</variable>
          <variable>removed_dm as RemovedWt</variable>
          <variable>returned_dm as ReturnedWt</variable>
          <variable>harvested_n as DefoliatedN</variable>
          <variable>harvested_n as HarvestedN</variable>
          <variable>removed_n as RemovedN</variable>
          <variable>NReturnedInDung as NReturnedInDung</variable>
          <variable>NReturnedInUrine as NReturnedInUrine</variable>
          <variable>DaysAfterCut as DaysAfterCut</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
        <Graph name="XY">
          <Format></Format>
          <Legend>
            <CheckedTitles> HerbageDigestibility</CheckedTitles>
            <CheckedTitles> DefoliatedDigestibility</CheckedTitles>
            <CheckedTitles> SwardDefoliatedDigestibility</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>HerbageDigestibility</Y>
            <Y>DefoliatedDigestibility</Y>
            <Y>SwardDefoliatedDigestibility</Y>
            <Y>SpeciesDeadDigestibility</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </outputfile>
      <GraphReport name="Plant">
        <Graph name="PlantWt">
          <Legend>
            <CheckedTitles> Ryegrass.TotalWt</CheckedTitles>
            <CheckedTitles> Ryegrass.AboveGroundWt</CheckedTitles>
            <CheckedTitles> Ryegrass.BelowGroundWt</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalWt</Y>
            <Y>Ryegrass.AboveGroundWt</Y>
            <Y>Ryegrass.BelowGroundWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantN">
          <Legend>
            <CheckedTitles> Ryegrass.TotalN</CheckedTitles>
            <CheckedTitles> Ryegrass.LeafN</CheckedTitles>
            <CheckedTitles> Ryegrass.StemN</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalN</Y>
            <Y>Ryegrass.LeafN</Y>
            <Y>Ryegrass.StemN</Y>
            <Y>Ryegrass.RootN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="StandingWt">
          <Legend>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.StandingLiveWt</Y>
            <Y>Ryegrass.StandingDeadWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="LAI">
          <Legend>
            <CheckedTitles> Ryegrass.TotalLAI</CheckedTitles>
            <CheckedTitles> Ryegrass.GreenLAI</CheckedTitles>
            <CheckedTitles> Ryegrass.DeadLAI</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.TotalLAI</Y>
            <Y>Ryegrass.GreenLAI</Y>
            <Y>Ryegrass.DeadLAI</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Harvest">
        <Graph name="PlantDM">
          <Legend>
            <CheckedTitles> Pasture.StandingWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Pasture.StandingWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PreHarvestDM, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PreHarvestDM, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PostHarvestDM, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> PostHarvestDM, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Pasture.StandingWt</Y>
            <Y>PreHarvestDM</Y>
            <Y>PostHarvestDM</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMHarvestable">
          <Legend>
            <CheckedTitles> Ryegrass.HarvestableWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestableWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageDigestibility, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageDigestibility, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HarvestableWt</Y>
            <Y>Ryegrass.HarvestedWt</Y>
            <YRight>Ryegrass.HerbageDigestibility</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="DMYield">
          <Legend>
            <CheckedTitles> Ryegrass.HarvestedWt</CheckedTitles>
            <CheckedTitles> Cumulative Ryegrass.HarvestedWt</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HarvestedWt</Y>
            <YRight>Cumulative Ryegrass.HarvestedWt</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Harvest">
          <Legend>
            <CheckedTitles> Cumulative HarvestedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative HarvestedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative RemovedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative RemovedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative ReturnedWt, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> Cumulative ReturnedWt, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <YRight>Cumulative HarvestedWt</YRight>
            <YRight>Cumulative RemovedWt</YRight>
            <YRight>Cumulative ReturnedWt</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Digestibility">
          <Legend>
            <CheckedTitles> Ryegrass.HerbageDigestibility</CheckedTitles>
            <CheckedTitles> Ryegrass.HarvestedDigestibility</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.HerbageDigestibility</Y>
            <Y>Ryegrass.HarvestedDigestibility</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Growth">
        <Graph name="Potential">
          <Legend>
            <CheckedTitles> Ryegrass.GrossPotentialGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.GrossPotentialGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.NetPotentialGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.NetPotentialGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GrossPotentialGrowthWt</Y>
            <Y>Ryegrass.NetPotentialGrowthWt</Y>
            <Y>Ryegrass.PotGrowthWt_Wstress</Y>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Actual">
          <Legend>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.PotGrowthWt_Wstress, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.PotGrowthWt_Wstress</Y>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <Y>Ryegrass.EffectiveGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Herbage">
          <Legend>
            <CheckedTitles> Ryegrass.ActualGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.ActualGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.EffectiveGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageGrowthWt, OneSpecies AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.HerbageGrowthWt, {Checkpoint} OneSpecies AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.ActualGrowthWt</Y>
            <Y>Ryegrass.EffectiveGrowthWt</Y>
            <Y>Ryegrass.HerbageGrowthWt</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Allocation">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.ShootDMAllocation</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="GLFs">
        <Graph name="GLFTdamage">
          <Legend>
            <CheckedTitles>Plot,  Ryegrass.GlfCold</CheckedTitles>
            <CheckedTitles>Plot1,  Ryegrass.GlfHeat</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfCold</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
          <Plot name="Plot1">
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfHeat</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFNcon">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfNConcentration</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFW">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfWater</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFN">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="GLFTemp">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.GlfTemperature</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Radn">
          <Legend>
            <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.IrradianceTopCanopy</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="NBalance">
        <Graph name="MineralN">
          <Legend>
            <CheckedTitles> TotalNO3, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNO3, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNH4, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalNH4, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalNO3</Y>
            <Y>TotalNH4</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="OrganicN">
          <Legend>
            <CheckedTitles> TotalBiomN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalBiomN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalFomN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalFomN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SurfaceOMN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> SurfaceOMN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalHumusN, OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
            <CheckedTitles> TotalHumusN, {Checkpoint} OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalBiomN</Y>
            <Y>TotalFomN</Y>
            <Y>SurfaceOMN</Y>
            <YRight>TotalHumusN</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="Uptake">
        <Graph name="PlantWater">
          <Legend>
            <CheckedTitles> Ryegrass.WaterDemand, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterDemand, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterUptake, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.WaterUptake, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.WaterDemand</Y>
            <Y>Ryegrass.WaterUptake</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="PlantNUptake">
          <Legend>
            <CheckedTitles> Ryegrass.UptakeN, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.UptakeN, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.FixedN, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
            <CheckedTitles> Ryegrass.FixedN, {Checkpoint} Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RequiredLuxuryN</Y>
            <Y>Ryegrass.RequiredOptimumN</Y>
            <Y>Ryegrass.DemandSoilN</Y>
            <Y>Ryegrass.UptakeN</Y>
            <Y>Ryegrass.FixedN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="Remobilisation">
          <Legend>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableSenescedN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableSenescedN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableLuxuryN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot1, Ryegrass.RemobilisableLuxuryN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedSenescedN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedSenescedN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedLuxuryN,Ryegrass AgPastureClassic Results_Species</CheckedTitles>
            <CheckedTitles>Plot2, Ryegrass.RemobilisedLuxuryN,{Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
          </Legend>
          <Plot name="Plot1">
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RemobilisableSenescedN</Y>
            <Y>Ryegrass.RemobilisableLuxuryN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
          <Plot name="Plot2">
            <SeriesType>Dash line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>Ryegrass.RemobilisedSenescedN</Y>
            <Y>Ryegrass.RemobilisedLuxuryN</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
      <GraphReport name="WBalance">
        <Graph name="SWC">
          <Legend>
            <CheckedTitles> OneSpecies AgPastureClassic Results_MassBalance</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TotalSoilWater</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
        <Graph name="InOuts">
          <Legend>
            <CheckedTitles> Cumulative Rain</CheckedTitles>
            <CheckedTitles> Cumulative Irrigation</CheckedTitles>
            <CheckedTitles> Cumulative Runoff</CheckedTitles>
            <CheckedTitles> Cumulative Drainage</CheckedTitles>
            <CheckedTitles> Cumulative Evaporation</CheckedTitles>
            <CheckedTitles> Cumulative WaterUptake</CheckedTitles>
          </Legend>
          <Plot>
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <YRight>Cumulative Rain</YRight>
            <YRight>Cumulative Irrigation</YRight>
            <YRight>Cumulative Runoff</YRight>
            <YRight>Cumulative Drainage</YRight>
            <YRight>Cumulative Evaporation</YRight>
            <YRight>Cumulative WaterUptake</YRight>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
        </Graph>
      </GraphReport>
    </area>
    <Graph name="PlantWt">
      <Legend>
        <CheckedTitles> Ryegrass.AboveGroundWt, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.AboveGroundWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.BelowGroundWt, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.BelowGroundWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.TotalWt</Y>
        <Y>Ryegrass.AboveGroundWt</Y>
        <Y>Ryegrass.BelowGroundWt</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="DMYield">
      <Legend>
        <CheckedTitles> Ryegrass.HarvestedWt</CheckedTitles>
        <CheckedTitles> Cumulative Ryegrass.HarvestedWt</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.HarvestedWt</Y>
        <YRight>Cumulative Ryegrass.HarvestedWt</YRight>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="GLFW">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.GlfWater</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="GLFN">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.GlfN</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="Digestibility">
      <Legend>
        <CheckedTitles> Ryegrass.HerbageDigestibility, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HerbageDigestibility, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HarvestedDigestibility, Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass.HarvestedDigestibility, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.HerbageDigestibility</Y>
        <Y>Ryegrass.HarvestedDigestibility</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="Allocation">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.ShootDMAllocation</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="PotGrowth">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <YRight>Cumulative Ryegrass.GrossPotentialGrowthWt</YRight>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
    <Graph name="PotGrowth1">
      <Legend>
        <CheckedTitles> Ryegrass AgPastureLiFY Results_Species</CheckedTitles>
        <CheckedTitles> Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      </Legend>
      <Plot>
        <SeriesType>Solid line</SeriesType>
        <PointType>None</PointType>
        <colour>
        </colour>
        <X>Date</X>
        <Y>Ryegrass.Height</Y>
        <GDApsimFileReader name="ApsimFileReader" />
      </Plot>
    </Graph>
  </simulation>
  <Graph name="DMYield">
    <Legend>
      <CheckedTitles> Cumulative Ryegrass.HarvestedWt, Ryegrass AgPastureClassic Results_Species</CheckedTitles>
      <CheckedTitles> Cumulative Ryegrass.HarvestedWt, {Checkpoint} Ryegrass AgPastureClassic Results_Species</CheckedTitles>
    </Legend>
    <Plot>
      <SeriesType>Solid line</SeriesType>
      <PointType>None</PointType>
      <colour>
      </colour>
      <X>Date</X>
      <Y>Ryegrass.HarvestedWt</Y>
      <YRight>Cumulative Ryegrass.HarvestedWt</YRight>
      <GDApsimFileReader name="ApsimFileReader" />
    </Plot>
  </Graph>
</folder>